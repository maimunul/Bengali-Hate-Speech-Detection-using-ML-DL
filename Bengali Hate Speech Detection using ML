{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8c5d4678",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:08.000828Z",
     "iopub.status.busy": "2024-04-16T20:17:08.000442Z",
     "iopub.status.idle": "2024-04-16T20:17:10.764416Z",
     "shell.execute_reply": "2024-04-16T20:17:10.763547Z"
    },
    "papermill": {
     "duration": 2.781426,
     "end_time": "2024-04-16T20:17:10.766759",
     "exception": false,
     "start_time": "2024-04-16T20:17:07.985333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import nltk\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "from collections import Counter\n",
    "import matplotlib.pyplot as plt\n",
    "from wordcloud import WordCloud\n",
    "import seaborn as sns\n",
    "import re\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29131f21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:10.794310Z",
     "iopub.status.busy": "2024-04-16T20:17:10.793910Z",
     "iopub.status.idle": "2024-04-16T20:17:11.024318Z",
     "shell.execute_reply": "2024-04-16T20:17:11.023425Z"
    },
    "papermill": {
     "duration": 0.246428,
     "end_time": "2024-04-16T20:17:11.026611",
     "exception": false,
     "start_time": "2024-04-16T20:17:10.780183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/bengali-hate-speech-dataset/Bengali hate speech .csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eca0c889",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.056242Z",
     "iopub.status.busy": "2024-04-16T20:17:11.055393Z",
     "iopub.status.idle": "2024-04-16T20:17:11.071548Z",
     "shell.execute_reply": "2024-04-16T20:17:11.070666Z"
    },
    "papermill": {
     "duration": 0.03295,
     "end_time": "2024-04-16T20:17:11.073585",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.040635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentence</th>\n",
       "      <th>hate</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>‡¶Ø‡¶§‡ßç‡¶§‡¶∏‡¶¨ ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶ú‡¶≤‡¶æ‡¶Æ‡ßÄ!!!!!</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>‡¶ú‡¶ø‡¶≤‡ßç‡¶≤‡ßÅ‡¶∞ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá ‡¶è‡¶§‡ßã ‡¶¨‡ßú ‡¶ú‡¶æ‡¶∞‡¶ú ‡¶π‡¶¨‡ßá ‡¶è‡¶ü‡¶æ...</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>‡¶∂‡¶æ‡¶≤‡¶æ ‡¶≤‡ßÅ‡¶ö‡ßç‡¶ö‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>‡¶§‡ßÅ‡¶á ‡¶§‡ßã ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶ó‡¶æ‡¶ú‡¶æ ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ö‡•§‡¶§‡ßÅ‡¶∞ ‡¶Æ‡¶æ‡¶∞ ‡¶π‡ßá‡¶°‡¶æ‡ßü ‡¶ñ‡ßá‡¶≤‡¶¨‡ßá ‡¶∏‡¶æ‡¶ï‡¶ø‡¶¨</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>‡¶è‡¶ü‡¶æ ‡¶ï‡ßÅ‡¶® ‡¶¶‡¶∞‡¶®‡ßá‡¶∞ ‡¶ï‡ßá‡¶≤‡¶æ ‡¶´‡¶æ‡¶á‡¶ú‡¶≤‡¶æ‡¶Æ‡¶ø ‡¶§‡¶æ‡¶∏‡ßç‡¶ï‡¶ø‡¶® ‡¶∞‡ßá ‡¶ö‡¶∞ ‡¶Æ‡¶æ‡¶∞‡¶æ...</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>‡¶™‡¶æ‡¶™‡¶® ‡¶≠‡¶∞ ‡¶Æ‡¶æ‡¶¶‡¶æ ‡¶ö‡ßã‡¶¶ ‡¶™‡¶æ‡¶™‡¶®‡ßá ‡¶™‡¶¶‡¶§‡ßá‡¶ï ‡¶ö‡¶æ‡¶á</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>‡¶¶‡ßÅ‡¶∞‡ßã ‡¶∏‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶¶ ‡¶ö‡ßÅ‡¶™‡¶•‡¶æ‡¶ï</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶õ‡¶ö‡¶æ ‡¶™‡¶æ‡¶™‡¶®</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>‡¶¨‡¶æ‡¶≤ ‡¶õ‡¶æ‡¶≤ ‡¶§‡¶∞ ‡¶∏‡¶æ‡¶â‡ßü‡¶æüò°</td>\n",
       "      <td>1</td>\n",
       "      <td>sports</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            sentence  hate category\n",
       "0                     ‡¶Ø‡¶§‡ßç‡¶§‡¶∏‡¶¨ ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶ú‡¶≤‡¶æ‡¶Æ‡ßÄ!!!!!     1   sports\n",
       "1                  ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞     1   sports\n",
       "2  ‡¶ú‡¶ø‡¶≤‡ßç‡¶≤‡ßÅ‡¶∞ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá ‡¶è‡¶§‡ßã ‡¶¨‡ßú ‡¶ú‡¶æ‡¶∞‡¶ú ‡¶π‡¶¨‡ßá ‡¶è‡¶ü‡¶æ...     1   sports\n",
       "3                ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶≤‡ßÅ‡¶ö‡ßç‡¶ö‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü     1   sports\n",
       "4   ‡¶§‡ßÅ‡¶á ‡¶§‡ßã ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶ó‡¶æ‡¶ú‡¶æ ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ö‡•§‡¶§‡ßÅ‡¶∞ ‡¶Æ‡¶æ‡¶∞ ‡¶π‡ßá‡¶°‡¶æ‡ßü ‡¶ñ‡ßá‡¶≤‡¶¨‡ßá ‡¶∏‡¶æ‡¶ï‡¶ø‡¶¨     1   sports\n",
       "5  ‡¶è‡¶ü‡¶æ ‡¶ï‡ßÅ‡¶® ‡¶¶‡¶∞‡¶®‡ßá‡¶∞ ‡¶ï‡ßá‡¶≤‡¶æ ‡¶´‡¶æ‡¶á‡¶ú‡¶≤‡¶æ‡¶Æ‡¶ø ‡¶§‡¶æ‡¶∏‡ßç‡¶ï‡¶ø‡¶® ‡¶∞‡ßá ‡¶ö‡¶∞ ‡¶Æ‡¶æ‡¶∞‡¶æ...     1   sports\n",
       "6                   ‡¶™‡¶æ‡¶™‡¶® ‡¶≠‡¶∞ ‡¶Æ‡¶æ‡¶¶‡¶æ ‡¶ö‡ßã‡¶¶ ‡¶™‡¶æ‡¶™‡¶®‡ßá ‡¶™‡¶¶‡¶§‡ßá‡¶ï ‡¶ö‡¶æ‡¶á     1   sports\n",
       "7                              ‡¶¶‡ßÅ‡¶∞‡ßã ‡¶∏‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶¶ ‡¶ö‡ßÅ‡¶™‡¶•‡¶æ‡¶ï     1   sports\n",
       "8                                 ‡¶ï‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶õ‡¶ö‡¶æ ‡¶™‡¶æ‡¶™‡¶®     1   sports\n",
       "9                                  ‡¶¨‡¶æ‡¶≤ ‡¶õ‡¶æ‡¶≤ ‡¶§‡¶∞ ‡¶∏‡¶æ‡¶â‡ßü‡¶æüò°     1   sports"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b93eef3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.103915Z",
     "iopub.status.busy": "2024-04-16T20:17:11.103311Z",
     "iopub.status.idle": "2024-04-16T20:17:11.108956Z",
     "shell.execute_reply": "2024-04-16T20:17:11.108121Z"
    },
    "papermill": {
     "duration": 0.021837,
     "end_time": "2024-04-16T20:17:11.110933",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.089096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30000, 3)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a97f8cf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.139265Z",
     "iopub.status.busy": "2024-04-16T20:17:11.138959Z",
     "iopub.status.idle": "2024-04-16T20:17:11.143626Z",
     "shell.execute_reply": "2024-04-16T20:17:11.142930Z"
    },
    "papermill": {
     "duration": 0.021054,
     "end_time": "2024-04-16T20:17:11.145497",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.124443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 1. Data cleaning\n",
    "# 2. EDA\n",
    "# 3. Text Preprocessing\n",
    "# 4. Model building\n",
    "# 5. Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db315644",
   "metadata": {
    "papermill": {
     "duration": 0.013185,
     "end_time": "2024-04-16T20:17:11.171972",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.158787",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2671a49e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.200227Z",
     "iopub.status.busy": "2024-04-16T20:17:11.199950Z",
     "iopub.status.idle": "2024-04-16T20:17:11.227122Z",
     "shell.execute_reply": "2024-04-16T20:17:11.226231Z"
    },
    "papermill": {
     "duration": 0.043392,
     "end_time": "2024-04-16T20:17:11.229003",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.185611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 30000 entries, 0 to 29999\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype \n",
      "---  ------    --------------  ----- \n",
      " 0   sentence  30000 non-null  object\n",
      " 1   hate      30000 non-null  int64 \n",
      " 2   category  30000 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 703.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "28d5ac14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.257518Z",
     "iopub.status.busy": "2024-04-16T20:17:11.256919Z",
     "iopub.status.idle": "2024-04-16T20:17:11.271613Z",
     "shell.execute_reply": "2024-04-16T20:17:11.270783Z"
    },
    "papermill": {
     "duration": 0.031307,
     "end_time": "2024-04-16T20:17:11.273848",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.242541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentence</th>\n",
       "      <th>hate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6521</th>\n",
       "      <td>‡¶è‡¶á ‡¶π‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶á‡¶Æ‡¶æ‡¶®‡ßÄ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22776</th>\n",
       "      <td>‡¶á‡¶∏‡ßç‡¶ï‡¶® ‡¶Ü‡¶≤‡¶Æ ‡¶≠‡¶æ‡¶á ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®???‡¶á‡¶∏‡ßç‡¶ï‡¶®‡ßá‡¶∞ ‡¶¶‡¶æ‡¶≤‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8277</th>\n",
       "      <td>‡¶π‡¶æ‡¶≤‡¶æ‡ßü ‡¶Æ‡¶∞‡ßá ‡¶®‡¶æ‡ßü,‡¶§‡¶æ‡¶á‡¶≤‡ßá ‡¶π‡¶æ‡¶≤‡¶æ‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ó‡¶æ‡¶Å‡¶ú‡¶æ ‡¶¶‡ßá ‡¶ñ‡¶æ‡¶á‡ßü‡¶æ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28606</th>\n",
       "      <td>‡¶∏‡¶¨‡¶æ‡¶á#</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16131</th>\n",
       "      <td>‡¶π‡¶æ ‡¶π‡¶æ ‡¶π‡¶æ‡•§‡¶Æ‡¶®‡ßá ‡¶π‡ßü ‡¶™‡ßç‡¶∞‡ßá‡¶ó‡¶®‡ßá‡¶®‡ßç‡¶ü‡•§</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                sentence  hate\n",
       "6521                  ‡¶è‡¶á ‡¶π‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶á‡¶Æ‡¶æ‡¶®‡ßÄ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞     1\n",
       "22776  ‡¶á‡¶∏‡ßç‡¶ï‡¶® ‡¶Ü‡¶≤‡¶Æ ‡¶≠‡¶æ‡¶á ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®???‡¶á‡¶∏‡ßç‡¶ï‡¶®‡ßá‡¶∞ ‡¶¶‡¶æ‡¶≤‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®...     0\n",
       "8277   ‡¶π‡¶æ‡¶≤‡¶æ‡ßü ‡¶Æ‡¶∞‡ßá ‡¶®‡¶æ‡ßü,‡¶§‡¶æ‡¶á‡¶≤‡ßá ‡¶π‡¶æ‡¶≤‡¶æ‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ó‡¶æ‡¶Å‡¶ú‡¶æ ‡¶¶‡ßá ‡¶ñ‡¶æ‡¶á‡ßü‡¶æ...     1\n",
       "28606                                              ‡¶∏‡¶¨‡¶æ‡¶á#     0\n",
       "16131                        ‡¶π‡¶æ ‡¶π‡¶æ ‡¶π‡¶æ‡•§‡¶Æ‡¶®‡ßá ‡¶π‡ßü ‡¶™‡ßç‡¶∞‡ßá‡¶ó‡¶®‡ßá‡¶®‡ßç‡¶ü‡•§     0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop last 3 cols\n",
    "df.drop(columns=['category'],inplace=True)\n",
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "709accfa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.303345Z",
     "iopub.status.busy": "2024-04-16T20:17:11.303068Z",
     "iopub.status.idle": "2024-04-16T20:17:11.313427Z",
     "shell.execute_reply": "2024-04-16T20:17:11.312587Z"
    },
    "papermill": {
     "duration": 0.027203,
     "end_time": "2024-04-16T20:17:11.315670",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.288467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22546</th>\n",
       "      <td>‡¶ï‡¶æ‡¶∞‡¶® ‡¶ì‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡ßá ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ì‡¶¶‡ßá‡¶∞ ‡¶∑‡ßú‡¶Ø‡¶®‡ßç‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶ò‡¶æ‡¶ü...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21757</th>\n",
       "      <td>‡¶¢‡¶æ‡¶¨‡¶ø‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏‡¶ï‡ßá ‡¶§‡ßã‡¶∞‡¶æ ‡¶ï‡¶≤‡¶Ç‡¶ï‡¶ø‡¶§ ‡¶Ü‡¶¨‡¶æ‡¶∞‡ßã‡•§</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17479</th>\n",
       "      <td>‡¶∏‡¶¨ ‡¶ú‡¶æ‡¶Æ‡¶æ‡¶§ ‡¶∂‡¶ø‡¶¨‡¶ø‡¶∞‡ßá‡¶∞ ‡¶ö‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶è‡¶∞‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶ó‡¶ø‡ßü‡ßá‡¶õ‡ßá...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9750</th>\n",
       "      <td>‡¶è‡¶á ‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶ö‡ßã‡¶¶ ‡¶ï‡ßá ‡¶™‡¶ø‡¶ü‡¶æ‡¶ì</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16532</th>\n",
       "      <td>‡¶¨‡¶ô‡ßç‡¶ó‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶ï‡¶®‡ßç‡¶Ø‡¶æ ‡¶∂‡ßá‡¶ñ ‡¶π‡¶æ‡¶∏‡¶ø‡¶®‡¶æ ‡¶§‡¶ø‡¶®‡¶ø ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ú‡¶® ‡¶≤‡ßã‡¶ï ‡¶Ø...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  target\n",
       "22546  ‡¶ï‡¶æ‡¶∞‡¶® ‡¶ì‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡ßá ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ì‡¶¶‡ßá‡¶∞ ‡¶∑‡ßú‡¶Ø‡¶®‡ßç‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶ò‡¶æ‡¶ü...       0\n",
       "21757                  ‡¶¢‡¶æ‡¶¨‡¶ø‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏‡¶ï‡ßá ‡¶§‡ßã‡¶∞‡¶æ ‡¶ï‡¶≤‡¶Ç‡¶ï‡¶ø‡¶§ ‡¶Ü‡¶¨‡¶æ‡¶∞‡ßã‡•§       0\n",
       "17479  ‡¶∏‡¶¨ ‡¶ú‡¶æ‡¶Æ‡¶æ‡¶§ ‡¶∂‡¶ø‡¶¨‡¶ø‡¶∞‡ßá‡¶∞ ‡¶ö‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶è‡¶∞‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶ó‡¶ø‡ßü‡ßá‡¶õ‡ßá...       0\n",
       "9750                               ‡¶è‡¶á ‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶ö‡ßã‡¶¶ ‡¶ï‡ßá ‡¶™‡¶ø‡¶ü‡¶æ‡¶ì       1\n",
       "16532  ‡¶¨‡¶ô‡ßç‡¶ó‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶ï‡¶®‡ßç‡¶Ø‡¶æ ‡¶∂‡ßá‡¶ñ ‡¶π‡¶æ‡¶∏‡¶ø‡¶®‡¶æ ‡¶§‡¶ø‡¶®‡¶ø ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ú‡¶® ‡¶≤‡ßã‡¶ï ‡¶Ø...       0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# renaming the cols\n",
    "df.rename(columns={'hate':'target','sentence':'text'},inplace=True)\n",
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "88b44696",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.345460Z",
     "iopub.status.busy": "2024-04-16T20:17:11.345192Z",
     "iopub.status.idle": "2024-04-16T20:17:11.357288Z",
     "shell.execute_reply": "2024-04-16T20:17:11.356427Z"
    },
    "papermill": {
     "duration": 0.029079,
     "end_time": "2024-04-16T20:17:11.359398",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.330319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>‡¶Ø‡¶§‡ßç‡¶§‡¶∏‡¶¨ ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶ú‡¶≤‡¶æ‡¶Æ‡ßÄ!!!!!</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>‡¶ú‡¶ø‡¶≤‡ßç‡¶≤‡ßÅ‡¶∞ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá ‡¶è‡¶§‡ßã ‡¶¨‡ßú ‡¶ú‡¶æ‡¶∞‡¶ú ‡¶π‡¶¨‡ßá ‡¶è‡¶ü‡¶æ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>‡¶∂‡¶æ‡¶≤‡¶æ ‡¶≤‡ßÅ‡¶ö‡ßç‡¶ö‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>‡¶§‡ßÅ‡¶á ‡¶§‡ßã ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶ó‡¶æ‡¶ú‡¶æ ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ö‡•§‡¶§‡ßÅ‡¶∞ ‡¶Æ‡¶æ‡¶∞ ‡¶π‡ßá‡¶°‡¶æ‡ßü ‡¶ñ‡ßá‡¶≤‡¶¨‡ßá ‡¶∏‡¶æ‡¶ï‡¶ø‡¶¨</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  target\n",
       "0                     ‡¶Ø‡¶§‡ßç‡¶§‡¶∏‡¶¨ ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶ú‡¶≤‡¶æ‡¶Æ‡ßÄ!!!!!       1\n",
       "1                  ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞       1\n",
       "2  ‡¶ú‡¶ø‡¶≤‡ßç‡¶≤‡ßÅ‡¶∞ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá ‡¶è‡¶§‡ßã ‡¶¨‡ßú ‡¶ú‡¶æ‡¶∞‡¶ú ‡¶π‡¶¨‡ßá ‡¶è‡¶ü‡¶æ...       1\n",
       "3                ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶≤‡ßÅ‡¶ö‡ßç‡¶ö‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü       1\n",
       "4   ‡¶§‡ßÅ‡¶á ‡¶§‡ßã ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶ó‡¶æ‡¶ú‡¶æ ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ö‡•§‡¶§‡ßÅ‡¶∞ ‡¶Æ‡¶æ‡¶∞ ‡¶π‡ßá‡¶°‡¶æ‡ßü ‡¶ñ‡ßá‡¶≤‡¶¨‡ßá ‡¶∏‡¶æ‡¶ï‡¶ø‡¶¨       1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "encoder = LabelEncoder()\n",
    "df['target'] = encoder.fit_transform(df['target'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7c3303c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.392052Z",
     "iopub.status.busy": "2024-04-16T20:17:11.391677Z",
     "iopub.status.idle": "2024-04-16T20:17:11.402920Z",
     "shell.execute_reply": "2024-04-16T20:17:11.402051Z"
    },
    "papermill": {
     "duration": 0.028933,
     "end_time": "2024-04-16T20:17:11.404896",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.375963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "text      0\n",
       "target    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# missing values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6df5a03e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.436141Z",
     "iopub.status.busy": "2024-04-16T20:17:11.435495Z",
     "iopub.status.idle": "2024-04-16T20:17:11.477712Z",
     "shell.execute_reply": "2024-04-16T20:17:11.476775Z"
    },
    "papermill": {
     "duration": 0.060274,
     "end_time": "2024-04-16T20:17:11.479829",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.419555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "136"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check for duplicate values\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0df81021",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.511197Z",
     "iopub.status.busy": "2024-04-16T20:17:11.510899Z",
     "iopub.status.idle": "2024-04-16T20:17:11.536513Z",
     "shell.execute_reply": "2024-04-16T20:17:11.535751Z"
    },
    "papermill": {
     "duration": 0.043355,
     "end_time": "2024-04-16T20:17:11.538467",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.495112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# remove duplicates\n",
    "df = df.drop_duplicates(keep='first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "44b7924c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.570190Z",
     "iopub.status.busy": "2024-04-16T20:17:11.569915Z",
     "iopub.status.idle": "2024-04-16T20:17:11.594612Z",
     "shell.execute_reply": "2024-04-16T20:17:11.593636Z"
    },
    "papermill": {
     "duration": 0.042011,
     "end_time": "2024-04-16T20:17:11.596457",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.554446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a621766b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.626506Z",
     "iopub.status.busy": "2024-04-16T20:17:11.626218Z",
     "iopub.status.idle": "2024-04-16T20:17:11.631454Z",
     "shell.execute_reply": "2024-04-16T20:17:11.630655Z"
    },
    "papermill": {
     "duration": 0.022504,
     "end_time": "2024-04-16T20:17:11.633353",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.610849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29864, 2)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38200de9",
   "metadata": {
    "papermill": {
     "duration": 0.014175,
     "end_time": "2024-04-16T20:17:11.662516",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.648341",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2.EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dd700808",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.693558Z",
     "iopub.status.busy": "2024-04-16T20:17:11.692684Z",
     "iopub.status.idle": "2024-04-16T20:17:11.702141Z",
     "shell.execute_reply": "2024-04-16T20:17:11.701143Z"
    },
    "papermill": {
     "duration": 0.02682,
     "end_time": "2024-04-16T20:17:11.704066",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.677246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>‡¶Ø‡¶§‡ßç‡¶§‡¶∏‡¶¨ ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶ú‡¶≤‡¶æ‡¶Æ‡ßÄ!!!!!</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>‡¶ú‡¶ø‡¶≤‡ßç‡¶≤‡ßÅ‡¶∞ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá ‡¶è‡¶§‡ßã ‡¶¨‡ßú ‡¶ú‡¶æ‡¶∞‡¶ú ‡¶π‡¶¨‡ßá ‡¶è‡¶ü‡¶æ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>‡¶∂‡¶æ‡¶≤‡¶æ ‡¶≤‡ßÅ‡¶ö‡ßç‡¶ö‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>‡¶§‡ßÅ‡¶á ‡¶§‡ßã ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶ó‡¶æ‡¶ú‡¶æ ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ö‡•§‡¶§‡ßÅ‡¶∞ ‡¶Æ‡¶æ‡¶∞ ‡¶π‡ßá‡¶°‡¶æ‡ßü ‡¶ñ‡ßá‡¶≤‡¶¨‡ßá ‡¶∏‡¶æ‡¶ï‡¶ø‡¶¨</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  target\n",
       "0                     ‡¶Ø‡¶§‡ßç‡¶§‡¶∏‡¶¨ ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶´‡¶æ‡¶ú‡¶≤‡¶æ‡¶Æ‡ßÄ!!!!!       1\n",
       "1                  ‡¶™‡¶æ‡¶™‡¶® ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶∞‡ßá ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞       1\n",
       "2  ‡¶ú‡¶ø‡¶≤‡ßç‡¶≤‡ßÅ‡¶∞ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶õ‡ßá‡¶≤‡ßá ‡¶è‡¶§‡ßã ‡¶¨‡ßú ‡¶ú‡¶æ‡¶∞‡¶ú ‡¶π‡¶¨‡ßá ‡¶è‡¶ü‡¶æ...       1\n",
       "3                ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶≤‡ßÅ‡¶ö‡ßç‡¶ö‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü       1\n",
       "4   ‡¶§‡ßÅ‡¶á ‡¶§‡ßã ‡¶∂‡¶æ‡¶≤‡¶æ ‡¶ó‡¶æ‡¶ú‡¶æ ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ö‡•§‡¶§‡ßÅ‡¶∞ ‡¶Æ‡¶æ‡¶∞ ‡¶π‡ßá‡¶°‡¶æ‡ßü ‡¶ñ‡ßá‡¶≤‡¶¨‡ßá ‡¶∏‡¶æ‡¶ï‡¶ø‡¶¨       1"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "133fd229",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.735477Z",
     "iopub.status.busy": "2024-04-16T20:17:11.735163Z",
     "iopub.status.idle": "2024-04-16T20:17:11.863120Z",
     "shell.execute_reply": "2024-04-16T20:17:11.861990Z"
    },
    "papermill": {
     "duration": 0.148174,
     "end_time": "2024-04-16T20:17:11.866829",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.718655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "target\n",
      "0    19905\n",
      "1     9959\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(df['target'].value_counts())\n",
    "import matplotlib.pyplot as plt\n",
    "plt.pie(df['target'].value_counts(), labels=['spam','not spam'],autopct=\"%0.2f\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e77d2447",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:11.900434Z",
     "iopub.status.busy": "2024-04-16T20:17:11.900095Z",
     "iopub.status.idle": "2024-04-16T20:17:12.057286Z",
     "shell.execute_reply": "2024-04-16T20:17:12.056110Z"
    },
    "papermill": {
     "duration": 0.17665,
     "end_time": "2024-04-16T20:17:12.059500",
     "exception": false,
     "start_time": "2024-04-16T20:17:11.882850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')\n",
    "stop_words = set(stopwords.words('bengali'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ac1bd140",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:12.092507Z",
     "iopub.status.busy": "2024-04-16T20:17:12.091654Z",
     "iopub.status.idle": "2024-04-16T20:17:20.004967Z",
     "shell.execute_reply": "2024-04-16T20:17:20.004147Z"
    },
    "papermill": {
     "duration": 7.932144,
     "end_time": "2024-04-16T20:17:20.007275",
     "exception": false,
     "start_time": "2024-04-16T20:17:12.075131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# num of character\n",
    "df['num_characters'] = df['text'].apply(len)\n",
    "# num of words\n",
    "df['num_words'] = df['text'].apply(lambda x:len(nltk.word_tokenize(x)))\n",
    "# num of sentence\n",
    "df['num_sentences'] = df['text'].apply(lambda x:len(nltk.sent_tokenize(x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d4e20ca6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:20.039344Z",
     "iopub.status.busy": "2024-04-16T20:17:20.039013Z",
     "iopub.status.idle": "2024-04-16T20:17:20.051267Z",
     "shell.execute_reply": "2024-04-16T20:17:20.050425Z"
    },
    "papermill": {
     "duration": 0.030586,
     "end_time": "2024-04-16T20:17:20.053356",
     "exception": false,
     "start_time": "2024-04-16T20:17:20.022770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8680</th>\n",
       "      <td>‡¶§‡ßã‡¶ï ‡¶Ü‡¶∞ ‡¶§‡ßã‡¶∞ ‡¶Æ‡¶æ‡¶ï ‡¶è‡¶ï ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶ö‡¶¶‡¶ø‡¶Æ ‡¶Æ‡¶æ‡¶ó‡ßÄ</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9400</th>\n",
       "      <td>‡¶ú‡¶æ‡¶®‡ßã‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶°‡¶æ‡¶® ‡¶π‡¶æ‡¶§ ‡¶ï‡ßá‡¶ü‡ßá ‡¶¶‡¶æ‡¶ì</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28617</th>\n",
       "      <td>‡¶§‡ßã‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶∞‡ßç‡¶ó‡¶æ‡¶ú‡¶Æ ‡¶π‡ßü‡¶®‡¶æ ‡¶§‡¶æ‡¶á ‡¶™‡ßú‡¶ø‡¶∏ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Æ‡¶®...</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14888</th>\n",
       "      <td>‡¶ì‡¶∞‡ßá ‡¶¨‡¶æ‡¶¨‡¶æ ‡¶∞‡ßá‡•§ ‡¶ì‡¶∞‡ßá ‡¶Æ‡¶æ ‡¶∞‡ßá</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>807</th>\n",
       "      <td>‡¶π‡¶æ‡¶á ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶∞‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ï‡ßç‡¶∏ ‡¶ï‡¶∞‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶¨‡¶æ‡¶∞</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16771</th>\n",
       "      <td>‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17687</th>\n",
       "      <td>‡¶≠‡¶æ‡¶á ‡¶ï‡¶æ‡¶∞‡ßã ‡¶ï‡¶æ‡¶õ‡ßá ‡¶ï‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶æ ‡¶π‡¶¨‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡ßç‡¶≤‡¶ø‡¶ú ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü...</td>\n",
       "      <td>0</td>\n",
       "      <td>53</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12870</th>\n",
       "      <td>‡¶è‡¶á‡¶ü‡¶æ ‡¶ï‡ßã‡¶® ‡¶õ‡¶¨‡¶ø ‡¶π‡¶≤ ‡¶®‡¶æ‡¶ï‡¶ø</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538</th>\n",
       "      <td>‡¶ì‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶™‡¶∞ ‡¶®‡ßá‡¶á ‡¶ï‡ßá‡¶®&lt;br /&gt;‡¶Ö‡¶®‡ßç‡¶Ø ‡¶Ø‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶Æ‡¶æ‡¶ó‡¶ø ‡¶¨‡¶æ...</td>\n",
       "      <td>1</td>\n",
       "      <td>123</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2683</th>\n",
       "      <td>‡¶§‡¶æ‡¶∞‡ßá‡¶ï‡ßá‡¶∞ ‡¶á‡¶ö‡ßç‡¶õ‡¶æ ‡¶™‡ßÇ‡¶∞‡¶® ‡¶π‡¶á‡¶õ‡ßá ‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶∞ ‡¶™‡ßã‡¶≤‡¶æ ‡ßü ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡ßá‡¶§...</td>\n",
       "      <td>1</td>\n",
       "      <td>77</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  target  \\\n",
       "8680                   ‡¶§‡ßã‡¶ï ‡¶Ü‡¶∞ ‡¶§‡ßã‡¶∞ ‡¶Æ‡¶æ‡¶ï ‡¶è‡¶ï ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶ö‡¶¶‡¶ø‡¶Æ ‡¶Æ‡¶æ‡¶ó‡ßÄ       1   \n",
       "9400                          ‡¶ú‡¶æ‡¶®‡ßã‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶°‡¶æ‡¶® ‡¶π‡¶æ‡¶§ ‡¶ï‡ßá‡¶ü‡ßá ‡¶¶‡¶æ‡¶ì       1   \n",
       "28617  ‡¶§‡ßã‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶∞‡ßç‡¶ó‡¶æ‡¶ú‡¶Æ ‡¶π‡ßü‡¶®‡¶æ ‡¶§‡¶æ‡¶á ‡¶™‡ßú‡¶ø‡¶∏ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶Æ‡¶®...       0   \n",
       "14888                             ‡¶ì‡¶∞‡ßá ‡¶¨‡¶æ‡¶¨‡¶æ ‡¶∞‡ßá‡•§ ‡¶ì‡¶∞‡ßá ‡¶Æ‡¶æ ‡¶∞‡ßá       0   \n",
       "807     ‡¶π‡¶æ‡¶á ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶∞‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ï‡ßç‡¶∏ ‡¶ï‡¶∞‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶¨‡¶æ‡¶∞       1   \n",
       "16771                                        ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞       0   \n",
       "17687  ‡¶≠‡¶æ‡¶á ‡¶ï‡¶æ‡¶∞‡ßã ‡¶ï‡¶æ‡¶õ‡ßá ‡¶ï‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶æ ‡¶π‡¶¨‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡ßç‡¶≤‡¶ø‡¶ú ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü...       0   \n",
       "12870                               ‡¶è‡¶á‡¶ü‡¶æ ‡¶ï‡ßã‡¶® ‡¶õ‡¶¨‡¶ø ‡¶π‡¶≤ ‡¶®‡¶æ‡¶ï‡¶ø       0   \n",
       "2538   ‡¶ì‡¶∞ ‡¶Æ‡¶æ‡¶•‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶™‡¶∞ ‡¶®‡ßá‡¶á ‡¶ï‡ßá‡¶®<br />‡¶Ö‡¶®‡ßç‡¶Ø ‡¶Ø‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶Æ‡¶æ‡¶ó‡¶ø ‡¶¨‡¶æ...       1   \n",
       "2683   ‡¶§‡¶æ‡¶∞‡ßá‡¶ï‡ßá‡¶∞ ‡¶á‡¶ö‡ßç‡¶õ‡¶æ ‡¶™‡ßÇ‡¶∞‡¶® ‡¶π‡¶á‡¶õ‡ßá ‡¶Æ‡¶æ‡¶ó‡ßÄ‡¶∞ ‡¶™‡ßã‡¶≤‡¶æ ‡ßü ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡ßá‡¶§...       1   \n",
       "\n",
       "       num_characters  num_words  num_sentences  \n",
       "8680               33          8              1  \n",
       "9400               26          5              1  \n",
       "28617              64         13              1  \n",
       "14888              22          6              1  \n",
       "807                48         10              1  \n",
       "16771              11          2              1  \n",
       "17687              53         10              1  \n",
       "12870              20          5              1  \n",
       "2538              123         30              1  \n",
       "2683               77         15              1  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5b475aa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:20.124629Z",
     "iopub.status.busy": "2024-04-16T20:17:20.124000Z",
     "iopub.status.idle": "2024-04-16T20:17:20.146667Z",
     "shell.execute_reply": "2024-04-16T20:17:20.145771Z"
    },
    "papermill": {
     "duration": 0.079514,
     "end_time": "2024-04-16T20:17:20.148673",
     "exception": false,
     "start_time": "2024-04-16T20:17:20.069159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>29864.000000</td>\n",
       "      <td>29864.000000</td>\n",
       "      <td>29864.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>81.783284</td>\n",
       "      <td>15.380090</td>\n",
       "      <td>1.123862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>129.520142</td>\n",
       "      <td>23.570115</td>\n",
       "      <td>0.612488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3158.000000</td>\n",
       "      <td>607.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       num_characters     num_words  num_sentences\n",
       "count    29864.000000  29864.000000   29864.000000\n",
       "mean        81.783284     15.380090       1.123862\n",
       "std        129.520142     23.570115       0.612488\n",
       "min          1.000000      1.000000       1.000000\n",
       "25%         27.000000      5.000000       1.000000\n",
       "50%         48.000000      9.000000       1.000000\n",
       "75%         90.000000     17.000000       1.000000\n",
       "max       3158.000000    607.000000      31.000000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['num_characters','num_words','num_sentences']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c1f25cb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:20.182334Z",
     "iopub.status.busy": "2024-04-16T20:17:20.181650Z",
     "iopub.status.idle": "2024-04-16T20:17:20.201898Z",
     "shell.execute_reply": "2024-04-16T20:17:20.201036Z"
    },
    "papermill": {
     "duration": 0.039125,
     "end_time": "2024-04-16T20:17:20.203919",
     "exception": false,
     "start_time": "2024-04-16T20:17:20.164794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>19905.000000</td>\n",
       "      <td>19905.000000</td>\n",
       "      <td>19905.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>87.156493</td>\n",
       "      <td>16.401306</td>\n",
       "      <td>1.153178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>146.171868</td>\n",
       "      <td>26.529914</td>\n",
       "      <td>0.698167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>49.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>93.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3158.000000</td>\n",
       "      <td>607.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       num_characters     num_words  num_sentences\n",
       "count    19905.000000  19905.000000   19905.000000\n",
       "mean        87.156493     16.401306       1.153178\n",
       "std        146.171868     26.529914       0.698167\n",
       "min          1.000000      1.000000       1.000000\n",
       "25%         27.000000      5.000000       1.000000\n",
       "50%         49.000000      9.000000       1.000000\n",
       "75%         93.000000     18.000000       1.000000\n",
       "max       3158.000000    607.000000      31.000000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# not hate\n",
    "df[df['target'] == 0][['num_characters','num_words','num_sentences']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9a8949fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:20.238152Z",
     "iopub.status.busy": "2024-04-16T20:17:20.237402Z",
     "iopub.status.idle": "2024-04-16T20:17:20.257540Z",
     "shell.execute_reply": "2024-04-16T20:17:20.256567Z"
    },
    "papermill": {
     "duration": 0.039669,
     "end_time": "2024-04-16T20:17:20.259585",
     "exception": false,
     "start_time": "2024-04-16T20:17:20.219916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9959.000000</td>\n",
       "      <td>9959.000000</td>\n",
       "      <td>9959.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>71.043880</td>\n",
       "      <td>13.338990</td>\n",
       "      <td>1.065268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>86.186605</td>\n",
       "      <td>15.904766</td>\n",
       "      <td>0.381535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>46.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>84.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2011.000000</td>\n",
       "      <td>381.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       num_characters    num_words  num_sentences\n",
       "count     9959.000000  9959.000000    9959.000000\n",
       "mean        71.043880    13.338990       1.065268\n",
       "std         86.186605    15.904766       0.381535\n",
       "min          3.000000     1.000000       1.000000\n",
       "25%         27.000000     5.000000       1.000000\n",
       "50%         46.000000     9.000000       1.000000\n",
       "75%         84.000000    16.000000       1.000000\n",
       "max       2011.000000   381.000000      16.000000"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# hate\n",
    "df[df['target'] == 1][['num_characters','num_words','num_sentences']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e69895cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:20.295298Z",
     "iopub.status.busy": "2024-04-16T20:17:20.294572Z",
     "iopub.status.idle": "2024-04-16T20:17:22.315715Z",
     "shell.execute_reply": "2024-04-16T20:17:22.314801Z"
    },
    "papermill": {
     "duration": 2.040858,
     "end_time": "2024-04-16T20:17:22.317858",
     "exception": false,
     "start_time": "2024-04-16T20:17:20.277000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='num_characters', ylabel='Count'>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "sns.histplot(df[df['target'] == 0]['num_characters'])\n",
    "sns.histplot(df[df['target'] == 1]['num_characters'],color='red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c62a06d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:22.353238Z",
     "iopub.status.busy": "2024-04-16T20:17:22.352627Z",
     "iopub.status.idle": "2024-04-16T20:17:24.365974Z",
     "shell.execute_reply": "2024-04-16T20:17:24.365064Z"
    },
    "papermill": {
     "duration": 2.033126,
     "end_time": "2024-04-16T20:17:24.368041",
     "exception": false,
     "start_time": "2024-04-16T20:17:22.334915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='num_words', ylabel='Count'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "sns.histplot(df[df['target'] == 0]['num_words'])\n",
    "sns.histplot(df[df['target'] == 1]['num_words'],color='red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a7ac0898",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:24.405542Z",
     "iopub.status.busy": "2024-04-16T20:17:24.404934Z",
     "iopub.status.idle": "2024-04-16T20:17:42.586482Z",
     "shell.execute_reply": "2024-04-16T20:17:42.585537Z"
    },
    "papermill": {
     "duration": 18.204428,
     "end_time": "2024-04-16T20:17:42.590578",
     "exception": false,
     "start_time": "2024-04-16T20:17:24.386150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x7b9f84207430>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 808.875x750 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(df,hue='target')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "93f76d76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:42.634594Z",
     "iopub.status.busy": "2024-04-16T20:17:42.634227Z",
     "iopub.status.idle": "2024-04-16T20:17:42.647163Z",
     "shell.execute_reply": "2024-04-16T20:17:42.646251Z"
    },
    "papermill": {
     "duration": 0.036629,
     "end_time": "2024-04-16T20:17:42.649078",
     "exception": false,
     "start_time": "2024-04-16T20:17:42.612449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25147</th>\n",
       "      <td>‡¶è‡¶ï‡¶ú‡¶® ‡¶≠‡¶ï‡ßç‡¶§ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡¶ï‡ßÅ‡¶≤ ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ú‡¶æ‡¶®‡¶æ‡¶ö...</td>\n",
       "      <td>0</td>\n",
       "      <td>157</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28921</th>\n",
       "      <td>‡¶Ü‡¶∞‡ßá ‡¶§‡ßã‡¶∞‡¶æ ‡¶è‡¶≤‡¶æ‡¶π‡¶æ‡¶¨‡¶æ‡¶¶ ‡¶π‡¶æ‡¶á‡¶ï‡ßã‡¶ü‡ßá#</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19706</th>\n",
       "      <td>‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶Æ‡¶æ‡¶® ‡¶¶‡ßá‡¶∞ ‡¶™‡¶ø‡¶∞ ‡¶è‡¶ï ‡¶ú‡¶® ‡¶Æ‡¶π‡¶æ‡¶®‡¶¨‡ßÄ ‡¶Ü‡¶∞ ‡¶ï‡ßá‡¶â ‡¶®‡¶æ Í´∞</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15311</th>\n",
       "      <td>‡¶∏‡¶´‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶õ‡¶¨‡¶ø‡•§ ‡¶∂‡¶æ‡¶¨‡¶®‡ßÇ‡¶∞ ‡¶∏‡¶´‡¶≤ ‡¶Ö‡¶≠‡¶ø‡¶®‡ßá‡¶§‡ßç‡¶∞‡ßÄ‡•§</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25223</th>\n",
       "      <td>‡¶§‡¶æ‡¶∞‡¶æ‡¶§‡¶æ‡¶∞‡¶ø ‡¶≠‡¶æ‡¶≤ ‡¶π‡ßü‡ßá ‡¶â‡¶†‡ßÅ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶§‡¶æ‡¶∞‡¶æ‡¶§‡¶æ...</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2272</th>\n",
       "      <td>‡¶∏‡¶æ‡¶∏‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶™‡ßã‡¶∞‡¶æ ‡¶ï‡¶á ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23682</th>\n",
       "      <td>‡¶°‡¶ø‡¶Æ ‡¶•‡ßá‡¶∞‡¶æ‡¶™‡¶ø</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25412</th>\n",
       "      <td>‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶¶‡ßá‡¶∂‡ßá ‡¶Ø‡ßá ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ö‡¶≤‡¶õ‡ßá ‡ßß‡ßØ‡ß≠‡ßß ‡¶∏‡¶æ‡¶≤‡ßá‡¶ì ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶è‡¶Æ‡¶®...</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5927</th>\n",
       "      <td>‡¶è‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶ó‡¶≤‡¶æ ‡¶ó‡¶æ‡¶∞‡¶¶‡ßá ‡¶´‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ï ‡¶≠‡¶®‡¶°‡ßã ‡¶π‡¶æ‡¶≤‡¶æ‡¶∞‡¶æ</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10249</th>\n",
       "      <td>‡¶≠‡ßÅ‡ßü‡¶æ ‡¶ñ‡¶¨‡¶∞ ‡¶§‡ßã ‡¶≠‡¶æ‡¶≤‡ßã‡¶á ‡¶§‡ßã ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡•§ ‡¶∏‡¶æ‡¶≤‡¶æ‡¶∞...</td>\n",
       "      <td>0</td>\n",
       "      <td>209</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  target  \\\n",
       "25147  ‡¶è‡¶ï‡¶ú‡¶® ‡¶≠‡¶ï‡ßç‡¶§ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ü‡¶ï‡ßÅ‡¶≤ ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ú‡¶æ‡¶®‡¶æ‡¶ö...       0   \n",
       "28921                         ‡¶Ü‡¶∞‡ßá ‡¶§‡ßã‡¶∞‡¶æ ‡¶è‡¶≤‡¶æ‡¶π‡¶æ‡¶¨‡¶æ‡¶¶ ‡¶π‡¶æ‡¶á‡¶ï‡ßã‡¶ü‡ßá#       0   \n",
       "19706           ‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶Æ‡¶æ‡¶® ‡¶¶‡ßá‡¶∞ ‡¶™‡¶ø‡¶∞ ‡¶è‡¶ï ‡¶ú‡¶® ‡¶Æ‡¶π‡¶æ‡¶®‡¶¨‡ßÄ ‡¶Ü‡¶∞ ‡¶ï‡ßá‡¶â ‡¶®‡¶æ Í´∞       0   \n",
       "15311          ‡¶∏‡¶´‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶õ‡¶¨‡¶ø‡•§ ‡¶∂‡¶æ‡¶¨‡¶®‡ßÇ‡¶∞ ‡¶∏‡¶´‡¶≤ ‡¶Ö‡¶≠‡¶ø‡¶®‡ßá‡¶§‡ßç‡¶∞‡ßÄ‡•§       0   \n",
       "25223  ‡¶§‡¶æ‡¶∞‡¶æ‡¶§‡¶æ‡¶∞‡¶ø ‡¶≠‡¶æ‡¶≤ ‡¶π‡ßü‡ßá ‡¶â‡¶†‡ßÅ‡¶® ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶§‡¶æ‡¶∞‡¶æ‡¶§‡¶æ...       0   \n",
       "2272                               ‡¶∏‡¶æ‡¶∏‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶™‡ßã‡¶∞‡¶æ ‡¶ï‡¶á ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì       1   \n",
       "23682                                         ‡¶°‡¶ø‡¶Æ ‡¶•‡ßá‡¶∞‡¶æ‡¶™‡¶ø       0   \n",
       "25412  ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶¶‡ßá‡¶∂‡ßá ‡¶Ø‡ßá ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ö‡¶≤‡¶õ‡ßá ‡ßß‡ßØ‡ß≠‡ßß ‡¶∏‡¶æ‡¶≤‡ßá‡¶ì ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶è‡¶Æ‡¶®...       0   \n",
       "5927           ‡¶è‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶ó‡¶≤‡¶æ ‡¶ó‡¶æ‡¶∞‡¶¶‡ßá ‡¶´‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ï ‡¶≠‡¶®‡¶°‡ßã ‡¶π‡¶æ‡¶≤‡¶æ‡¶∞‡¶æ       1   \n",
       "10249  ‡¶≠‡ßÅ‡ßü‡¶æ ‡¶ñ‡¶¨‡¶∞ ‡¶§‡ßã ‡¶≠‡¶æ‡¶≤‡ßã‡¶á ‡¶§‡ßã ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡•§ ‡¶∏‡¶æ‡¶≤‡¶æ‡¶∞...       0   \n",
       "\n",
       "       num_characters  num_words  num_sentences  \n",
       "25147             157         26              1  \n",
       "28921              26          5              1  \n",
       "19706              40         10              1  \n",
       "15311              41          6              1  \n",
       "25223              66         12              1  \n",
       "2272               21          4              1  \n",
       "23682              10          2              1  \n",
       "25412              66         12              1  \n",
       "5927               41          7              1  \n",
       "10249             209         42              1  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7067c1ab",
   "metadata": {
    "papermill": {
     "duration": 0.031009,
     "end_time": "2024-04-16T20:17:42.703850",
     "exception": false,
     "start_time": "2024-04-16T20:17:42.672841",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Data Preprocessing\n",
    "- Emoji Remove\n",
    "- Tokenization\n",
    "- Removing special characters\n",
    "- Removing stop words and punctuation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5d257e82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:42.754047Z",
     "iopub.status.busy": "2024-04-16T20:17:42.753024Z",
     "iopub.status.idle": "2024-04-16T20:17:43.005984Z",
     "shell.execute_reply": "2024-04-16T20:17:43.005181Z"
    },
    "papermill": {
     "duration": 0.278235,
     "end_time": "2024-04-16T20:17:43.008107",
     "exception": false,
     "start_time": "2024-04-16T20:17:42.729872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "DataFrame after removing emojis:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1046</th>\n",
       "      <td>‡¶™‡¶æ‡¶™‡¶® ‡¶ñ‡¶æ‡¶®‡¶ï‡¶ø‡¶∞ ‡¶™‡ßã‡¶≤‡¶æ ‡¶§‡ßã‡¶∞ ‡¶™‡¶¶‡¶§‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ö‡¶æ‡¶á</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14616</th>\n",
       "      <td>‡¶Æ‡¶®‡ßá‡¶∞ ‡¶ú‡ßç‡¶¨‡¶æ‡¶≤‡¶æ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¶‡ßá‡¶® ‡¶™‡ßç‡¶≤‡¶ø‡¶ú HD</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24909</th>\n",
       "      <td>‡¶™‡ßÉ‡¶•‡¶ø‡¶¨‡ßÄ ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞ ‡¶ö‡¶æ‡¶ü‡¶æ !!!</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23216</th>\n",
       "      <td>‡¶â‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶§‡ßç‡¶∞‡ßÄ ‡¶π‡¶≤‡ßá ‡¶ñ‡ßÅ‡¶∂‡¶ø ‡¶π‡¶§‡¶æ‡¶Æ ‡¶Ü‡¶Æ‡¶ø</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1887</th>\n",
       "      <td>‡¶Æ‡ßá‡ßü‡ßá ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶õ‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9810</th>\n",
       "      <td>‡¶∏‡¶æ‡¶≤‡¶æ ‡¶Æ‡¶¶‡¶ø ‡¶¶‡ßá‡¶ñ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶≤‡¶æ‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3620</th>\n",
       "      <td>‡¶®‡ßÅ‡¶®‡ßÅ ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶á‡¶õ‡¶ø‡¶≤‡ßã ‡¶§‡¶æ‡¶á ‡¶ï‡¶∞‡¶õ‡ßá ‡•• ‡¶∏‡¶∞‡¶≤ ‡¶Æ‡¶®‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡ßü ‡¶ï‡¶∞‡¶õ‡ßá ...</td>\n",
       "      <td>1</td>\n",
       "      <td>63</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26543</th>\n",
       "      <td>‡¶Ö‡¶æ‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶æ‡¶ó‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡¶æ‡¶Æ, ‡¶è‡¶ñ‡¶® ‡¶Ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø‡¶®‡¶æ‡•§...</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12878</th>\n",
       "      <td>‡¶∞‡¶ø‡ßü‡¶æ‡¶ú ‡¶Ü‡¶¨‡¶æ‡¶∞‡¶ì ‡¶Ü‡¶∏‡ßÅ‡¶ï</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25910</th>\n",
       "      <td>‡¶ú‡¶ò‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶ï‡¶ü‡¶ø‡¶∞ \"‡¶§‡¶ø‡¶®‡¶ø, ‡¶ï‡¶∞‡¶õ‡ßá‡¶®\" ‡¶è‡¶á ‡¶ú‡¶æ‡¶§‡ßÄ‡ßü ‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨...</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  target  \\\n",
       "1046                    ‡¶™‡¶æ‡¶™‡¶® ‡¶ñ‡¶æ‡¶®‡¶ï‡¶ø‡¶∞ ‡¶™‡ßã‡¶≤‡¶æ ‡¶§‡ßã‡¶∞ ‡¶™‡¶¶‡¶§‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ö‡¶æ‡¶á       1   \n",
       "14616                ‡¶Æ‡¶®‡ßá‡¶∞ ‡¶ú‡ßç‡¶¨‡¶æ‡¶≤‡¶æ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¶‡ßá‡¶® ‡¶™‡ßç‡¶≤‡¶ø‡¶ú HD       0   \n",
       "24909                       ‡¶™‡ßÉ‡¶•‡¶ø‡¶¨‡ßÄ ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞ ‡¶ö‡¶æ‡¶ü‡¶æ !!!       0   \n",
       "23216                ‡¶â‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶®‡¶Æ‡¶®‡ßç‡¶§‡ßç‡¶∞‡ßÄ ‡¶π‡¶≤‡ßá ‡¶ñ‡ßÅ‡¶∂‡¶ø ‡¶π‡¶§‡¶æ‡¶Æ ‡¶Ü‡¶Æ‡¶ø       0   \n",
       "1887                   ‡¶Æ‡ßá‡ßü‡ßá ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶õ‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá       1   \n",
       "9810               ‡¶∏‡¶æ‡¶≤‡¶æ ‡¶Æ‡¶¶‡¶ø ‡¶¶‡ßá‡¶ñ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶≤‡¶æ‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá       1   \n",
       "3620   ‡¶®‡ßÅ‡¶®‡ßÅ ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶á‡¶õ‡¶ø‡¶≤‡ßã ‡¶§‡¶æ‡¶á ‡¶ï‡¶∞‡¶õ‡ßá ‡•• ‡¶∏‡¶∞‡¶≤ ‡¶Æ‡¶®‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡ßü ‡¶ï‡¶∞‡¶õ‡ßá ...       1   \n",
       "26543  ‡¶Ö‡¶æ‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶æ‡¶ó‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡¶æ‡¶Æ, ‡¶è‡¶ñ‡¶® ‡¶Ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø‡¶®‡¶æ‡•§...       0   \n",
       "12878                                   ‡¶∞‡¶ø‡ßü‡¶æ‡¶ú ‡¶Ü‡¶¨‡¶æ‡¶∞‡¶ì ‡¶Ü‡¶∏‡ßÅ‡¶ï       0   \n",
       "25910  ‡¶ú‡¶ò‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶ï‡¶ü‡¶ø‡¶∞ \"‡¶§‡¶ø‡¶®‡¶ø, ‡¶ï‡¶∞‡¶õ‡ßá‡¶®\" ‡¶è‡¶á ‡¶ú‡¶æ‡¶§‡ßÄ‡ßü ‡¶∂‡¶¨‡ßç‡¶¶‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨...       0   \n",
       "\n",
       "       num_characters  num_words  num_sentences  \n",
       "1046               32          6              1  \n",
       "14616              35          7              1  \n",
       "24909              28          8              2  \n",
       "23216              35          6              1  \n",
       "1887               33          6              1  \n",
       "9810               37          8              1  \n",
       "3620               63         13              1  \n",
       "26543              72         13              1  \n",
       "12878              16          3              1  \n",
       "25910              74         18              2  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_emojis(text):\n",
    "    emoji_pattern = re.compile(\"[\"\n",
    "                               u\"\\U0001F600-\\U0001F64F\"\n",
    "                               u\"\\U0001F300-\\U0001F5FF\"\n",
    "                               u\"\\U0001F680-\\U0001F6FF\"\n",
    "                               u\"\\U0001F700-\\U0001F77F\"\n",
    "                               u\"\\U0001F780-\\U0001F7FF\"\n",
    "                               u\"\\U0001F800-\\U0001F8FF\"\n",
    "                               u\"\\U0001F900-\\U0001F9FF\"\n",
    "                               u\"\\U0001FA00-\\U0001FA6F\"\n",
    "                               u\"\\U0001FA70-\\U0001FAFF\"\n",
    "                               u\"\\U00002702-\\U000027B0\"\n",
    "                               u\"\\U000024C2-\\U0001F251\"\n",
    "                               \"]+\", flags=re.UNICODE)\n",
    "    return emoji_pattern.sub(r'', text)\n",
    "\n",
    "# Apply the remove_emojis function to the 'Text' column\n",
    "df['text'] = df['text'].apply(remove_emojis)\n",
    "\n",
    "# Display the modified DataFrame\n",
    "print(\"\\nDataFrame after removing emojis:\")\n",
    "\n",
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "811d6884",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:43.054419Z",
     "iopub.status.busy": "2024-04-16T20:17:43.053883Z",
     "iopub.status.idle": "2024-04-16T20:17:43.067247Z",
     "shell.execute_reply": "2024-04-16T20:17:43.066371Z"
    },
    "papermill": {
     "duration": 0.03878,
     "end_time": "2024-04-16T20:17:43.069382",
     "exception": false,
     "start_time": "2024-04-16T20:17:43.030602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['‡¶Ö‡¶§‡¶è‡¶¨',\n",
       " '‡¶Ö‡¶•‡¶ö',\n",
       " '‡¶Ö‡¶•‡¶¨‡¶æ',\n",
       " '‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ',\n",
       " '‡¶Ö‡¶®‡ßá‡¶ï',\n",
       " '‡¶Ö‡¶®‡ßá‡¶ï‡ßá',\n",
       " '‡¶Ö‡¶®‡ßá‡¶ï‡ßá‡¶á',\n",
       " '‡¶Ö‡¶®‡ßç‡¶§‡¶§',\n",
       " '‡¶Ö‡¶®‡ßç‡¶Ø',\n",
       " '‡¶Ö‡¶¨‡¶ß‡¶ø',\n",
       " '‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø',\n",
       " '‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡¶§',\n",
       " '‡¶Ü‡¶á',\n",
       " '‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ',\n",
       " '‡¶Ü‡¶ó‡ßá',\n",
       " '‡¶Ü‡¶ó‡ßá‡¶á',\n",
       " '‡¶Ü‡¶õ‡ßá',\n",
       " '‡¶Ü‡¶ú',\n",
       " '‡¶Ü‡¶¶‡ßç‡¶Ø‡¶≠‡¶æ‡¶ó‡ßá',\n",
       " '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞',\n",
       " '‡¶Ü‡¶™‡¶®‡¶ø',\n",
       " '‡¶Ü‡¶¨‡¶æ‡¶∞',\n",
       " '‡¶Ü‡¶Æ‡¶∞‡¶æ',\n",
       " '‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá',\n",
       " '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞',\n",
       " '‡¶Ü‡¶Æ‡¶æ‡¶∞',\n",
       " '‡¶Ü‡¶Æ‡¶ø',\n",
       " '‡¶Ü‡¶∞',\n",
       " '‡¶Ü‡¶∞‡¶ì',\n",
       " '‡¶á',\n",
       " '‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø',\n",
       " '‡¶á‡¶π‡¶æ',\n",
       " '‡¶â‡¶ö‡¶ø‡¶§',\n",
       " '‡¶â‡¶§‡ßç‡¶§‡¶∞',\n",
       " '‡¶â‡¶®‡¶ø',\n",
       " '‡¶â‡¶™‡¶∞',\n",
       " '‡¶â‡¶™‡¶∞‡ßá',\n",
       " '‡¶è',\n",
       " '‡¶è‡¶Å‡¶¶‡ßá‡¶∞',\n",
       " '‡¶è‡¶Å‡¶∞‡¶æ',\n",
       " '‡¶è‡¶á',\n",
       " '‡¶è‡¶ï‡¶á',\n",
       " '‡¶è‡¶ï‡¶ü‡¶ø',\n",
       " '‡¶è‡¶ï‡¶¨‡¶æ‡¶∞',\n",
       " '‡¶è‡¶ï‡ßá',\n",
       " '‡¶è‡¶ï‡ßç',\n",
       " '‡¶è‡¶ñ‡¶®',\n",
       " '‡¶è‡¶ñ‡¶®‡¶ì',\n",
       " '‡¶è‡¶ñ‡¶æ‡¶®‡ßá',\n",
       " '‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á',\n",
       " '‡¶è‡¶ü‡¶æ',\n",
       " '‡¶è‡¶ü‡¶æ‡¶á',\n",
       " '‡¶è‡¶ü‡¶ø',\n",
       " '‡¶è‡¶§',\n",
       " '‡¶è‡¶§‡¶ü‡¶æ‡¶á',\n",
       " '‡¶è‡¶§‡ßá',\n",
       " '‡¶è‡¶¶‡ßá‡¶∞',\n",
       " '‡¶è‡¶¨',\n",
       " '‡¶è‡¶¨‡¶Ç',\n",
       " '‡¶è‡¶¨‡¶æ‡¶∞',\n",
       " '‡¶è‡¶Æ‡¶®',\n",
       " '‡¶è‡¶Æ‡¶®‡¶ï‡ßÄ',\n",
       " '‡¶è‡¶Æ‡¶®‡¶ø',\n",
       " '‡¶è‡¶∞',\n",
       " '‡¶è‡¶∞‡¶æ',\n",
       " '‡¶è‡¶≤',\n",
       " '‡¶è‡¶∏',\n",
       " '‡¶è‡¶∏‡ßá',\n",
       " '‡¶ê',\n",
       " '‡¶ì',\n",
       " '‡¶ì‡¶Å‡¶¶‡ßá‡¶∞',\n",
       " '‡¶ì‡¶Å‡¶∞',\n",
       " '‡¶ì‡¶Å‡¶∞‡¶æ',\n",
       " '‡¶ì‡¶á',\n",
       " '‡¶ì‡¶ï‡ßá',\n",
       " '‡¶ì‡¶ñ‡¶æ‡¶®‡ßá',\n",
       " '‡¶ì‡¶¶‡ßá‡¶∞',\n",
       " '‡¶ì‡¶∞',\n",
       " '‡¶ì‡¶∞‡¶æ',\n",
       " '‡¶ï‡¶ñ‡¶®‡¶ì',\n",
       " '‡¶ï‡¶§',\n",
       " '‡¶ï‡¶¨‡ßá',\n",
       " '‡¶ï‡¶Æ‡¶®‡ßá',\n",
       " '‡¶ï‡¶Ø‡¶º‡ßá‡¶ï',\n",
       " '‡¶ï‡¶Ø‡¶º‡ßá‡¶ï‡¶ü‡¶ø',\n",
       " '‡¶ï‡¶∞‡¶õ‡ßá',\n",
       " '‡¶ï‡¶∞‡¶õ‡ßá‡¶®',\n",
       " '‡¶ï‡¶∞‡¶§‡ßá',\n",
       " '‡¶ï‡¶∞‡¶¨‡ßá',\n",
       " '‡¶ï‡¶∞‡¶¨‡ßá‡¶®',\n",
       " '‡¶ï‡¶∞‡¶≤‡ßá',\n",
       " '‡¶ï‡¶∞‡¶≤‡ßá‡¶®',\n",
       " '‡¶ï‡¶∞‡¶æ',\n",
       " '‡¶ï‡¶∞‡¶æ‡¶á',\n",
       " '‡¶ï‡¶∞‡¶æ‡¶Ø‡¶º',\n",
       " '‡¶ï‡¶∞‡¶æ‡¶∞',\n",
       " '‡¶ï‡¶∞‡¶ø',\n",
       " '‡¶ï‡¶∞‡¶ø‡¶§‡ßá',\n",
       " '‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ',\n",
       " '‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡ßá',\n",
       " '‡¶ï‡¶∞‡ßá',\n",
       " '‡¶ï‡¶∞‡ßá‡¶á',\n",
       " '‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡¶≤‡ßá‡¶®',\n",
       " '‡¶ï‡¶∞‡ßá‡¶õ‡ßá',\n",
       " '‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®',\n",
       " '‡¶ï‡¶∞‡ßá‡¶®',\n",
       " '‡¶ï‡¶æ‡¶â‡¶ï‡ßá',\n",
       " '‡¶ï‡¶æ‡¶õ',\n",
       " '‡¶ï‡¶æ‡¶õ‡ßá',\n",
       " '‡¶ï‡¶æ‡¶ú',\n",
       " '‡¶ï‡¶æ‡¶ú‡ßá',\n",
       " '‡¶ï‡¶æ‡¶∞‡¶ì',\n",
       " '‡¶ï‡¶æ‡¶∞‡¶£',\n",
       " '‡¶ï‡¶ø',\n",
       " '‡¶ï‡¶ø‡¶Ç‡¶¨‡¶æ',\n",
       " '‡¶ï‡¶ø‡¶õ‡ßÅ',\n",
       " '‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á',\n",
       " '‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ',\n",
       " '‡¶ï‡ßÄ',\n",
       " '‡¶ï‡ßá',\n",
       " '‡¶ï‡ßá‡¶â',\n",
       " '‡¶ï‡ßá‡¶â‡¶á',\n",
       " '‡¶ï‡ßá‡¶ñ‡¶æ',\n",
       " '‡¶ï‡ßá‡¶®',\n",
       " '‡¶ï‡ßã‡¶ü‡¶ø',\n",
       " '‡¶ï‡ßã‡¶®',\n",
       " '‡¶ï‡ßã‡¶®‡¶ì',\n",
       " '‡¶ï‡ßã‡¶®‡ßã',\n",
       " '‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá',\n",
       " '‡¶ï‡ßü‡ßá‡¶ï',\n",
       " '‡¶ñ‡ßÅ‡¶¨',\n",
       " '‡¶ó‡¶ø‡¶Ø‡¶º‡ßá',\n",
       " '‡¶ó‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá',\n",
       " '‡¶ó‡¶ø‡ßü‡ßá',\n",
       " '‡¶ó‡ßÅ‡¶≤‡¶ø',\n",
       " '‡¶ó‡ßá‡¶õ‡ßá',\n",
       " '‡¶ó‡ßá‡¶≤',\n",
       " '‡¶ó‡ßá‡¶≤‡ßá',\n",
       " '‡¶ó‡ßã‡¶ü‡¶æ',\n",
       " '‡¶ö‡¶≤‡ßá',\n",
       " '‡¶ö‡¶æ‡¶®',\n",
       " '‡¶ö‡¶æ‡¶Ø‡¶º',\n",
       " '‡¶ö‡¶æ‡¶∞',\n",
       " '‡¶ö‡¶æ‡¶≤‡ßÅ',\n",
       " '‡¶ö‡ßá‡¶Ø‡¶º‡ßá',\n",
       " '‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ',\n",
       " '‡¶õ‡¶æ‡¶°‡¶º‡¶æ',\n",
       " '‡¶õ‡¶æ‡¶°‡¶º‡¶æ‡¶ì',\n",
       " '‡¶õ‡¶ø‡¶≤',\n",
       " '‡¶õ‡¶ø‡¶≤‡ßá‡¶®',\n",
       " '‡¶ú‡¶®',\n",
       " '‡¶ú‡¶®‡¶ï‡ßá',\n",
       " '‡¶ú‡¶®‡ßá‡¶∞',\n",
       " '‡¶ú‡¶®‡ßç‡¶Ø',\n",
       " '‡¶ú‡¶®‡ßç‡¶Ø‡¶ì‡¶ú‡ßá',\n",
       " '‡¶ú‡¶æ‡¶®‡¶§‡ßá',\n",
       " '‡¶ú‡¶æ‡¶®‡¶æ',\n",
       " '‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã',\n",
       " '‡¶ú‡¶æ‡¶®‡¶æ‡¶Ø‡¶º',\n",
       " '‡¶ú‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá',\n",
       " '‡¶ú‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá',\n",
       " '‡¶ú‡ßá',\n",
       " '‡¶ú‡ßç‡¶®‡¶ú‡¶®',\n",
       " '‡¶ü‡¶ø',\n",
       " '‡¶†‡¶ø‡¶ï',\n",
       " '‡¶§‡¶ñ‡¶®',\n",
       " '‡¶§‡¶§',\n",
       " '‡¶§‡¶•‡¶æ',\n",
       " '‡¶§‡¶¨‡ßÅ',\n",
       " '‡¶§‡¶¨‡ßá',\n",
       " '‡¶§‡¶æ',\n",
       " '‡¶§‡¶æ‡¶Å‡¶ï‡ßá',\n",
       " '‡¶§‡¶æ‡¶Å‡¶¶‡ßá‡¶∞',\n",
       " '‡¶§‡¶æ‡¶Å‡¶∞',\n",
       " '‡¶§‡¶æ‡¶Å‡¶∞‡¶æ',\n",
       " '‡¶§‡¶æ‡¶Å‡¶æ‡¶π‡¶æ‡¶∞‡¶æ',\n",
       " '‡¶§‡¶æ‡¶á',\n",
       " '‡¶§‡¶æ‡¶ì',\n",
       " '‡¶§‡¶æ‡¶ï‡ßá',\n",
       " '‡¶§‡¶æ‡¶§‡ßá',\n",
       " '‡¶§‡¶æ‡¶¶‡ßá‡¶∞',\n",
       " '‡¶§‡¶æ‡¶∞',\n",
       " '‡¶§‡¶æ‡¶∞‡¶™‡¶∞',\n",
       " '‡¶§‡¶æ‡¶∞‡¶æ',\n",
       " '‡¶§‡¶æ‡¶∞‡ßà',\n",
       " '‡¶§‡¶æ‡¶π‡¶≤‡ßá',\n",
       " '‡¶§‡¶æ‡¶π‡¶æ',\n",
       " '‡¶§‡¶æ‡¶π‡¶æ‡¶§‡ßá',\n",
       " '‡¶§‡¶æ‡¶π‡¶æ‡¶∞',\n",
       " '‡¶§‡¶ø‡¶®‡¶ê',\n",
       " '‡¶§‡¶ø‡¶®‡¶ø',\n",
       " '‡¶§‡¶ø‡¶®‡¶ø‡¶ì',\n",
       " '‡¶§‡ßÅ‡¶Æ‡¶ø',\n",
       " '‡¶§‡ßÅ‡¶≤‡ßá',\n",
       " '‡¶§‡ßá‡¶Æ‡¶®',\n",
       " '‡¶§‡ßã',\n",
       " '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞',\n",
       " '‡¶•‡¶æ‡¶ï‡¶¨‡ßá',\n",
       " '‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡¶®',\n",
       " '‡¶•‡¶æ‡¶ï‡¶æ',\n",
       " '‡¶•‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º',\n",
       " '‡¶•‡¶æ‡¶ï‡ßá',\n",
       " '‡¶•‡¶æ‡¶ï‡ßá‡¶®',\n",
       " '‡¶•‡ßá‡¶ï‡ßá',\n",
       " '‡¶•‡ßá‡¶ï‡ßá‡¶á',\n",
       " '‡¶•‡ßá‡¶ï‡ßá‡¶ì',\n",
       " '‡¶¶‡¶ø‡¶ï‡ßá',\n",
       " '‡¶¶‡¶ø‡¶§‡ßá',\n",
       " '‡¶¶‡¶ø‡¶®',\n",
       " '‡¶¶‡¶ø‡¶Ø‡¶º‡ßá',\n",
       " '‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá',\n",
       " '‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®',\n",
       " '‡¶¶‡¶ø‡¶≤‡ßá‡¶®',\n",
       " '‡¶¶‡ßÅ',\n",
       " '‡¶¶‡ßÅ‡¶á',\n",
       " '‡¶¶‡ßÅ‡¶ü‡¶ø',\n",
       " '‡¶¶‡ßÅ‡¶ü‡ßã',\n",
       " '‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ',\n",
       " '‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞',\n",
       " '‡¶¶‡ßá‡¶ì‡ßü‡¶æ',\n",
       " '‡¶¶‡ßá‡¶ñ‡¶§‡ßá',\n",
       " '‡¶¶‡ßá‡¶ñ‡¶æ',\n",
       " '‡¶¶‡ßá‡¶ñ‡ßá',\n",
       " '‡¶¶‡ßá‡¶®',\n",
       " '‡¶¶‡ßá‡¶Ø‡¶º',\n",
       " '‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ',\n",
       " '‡¶ß‡¶∞‡¶æ',\n",
       " '‡¶ß‡¶∞‡ßá',\n",
       " '‡¶ß‡¶æ‡¶Æ‡¶æ‡¶∞',\n",
       " '‡¶®‡¶§‡ßÅ‡¶®',\n",
       " '‡¶®‡¶Ø‡¶º',\n",
       " '‡¶®‡¶æ',\n",
       " '‡¶®‡¶æ‡¶á',\n",
       " '‡¶®‡¶æ‡¶ï‡¶ø',\n",
       " '‡¶®‡¶æ‡¶ó‡¶æ‡¶¶',\n",
       " '‡¶®‡¶æ‡¶®‡¶æ',\n",
       " '‡¶®‡¶ø‡¶ú‡ßá',\n",
       " '‡¶®‡¶ø‡¶ú‡ßá‡¶á',\n",
       " '‡¶®‡¶ø‡¶ú‡ßá‡¶¶‡ßá‡¶∞',\n",
       " '‡¶®‡¶ø‡¶ú‡ßá‡¶∞',\n",
       " '‡¶®‡¶ø‡¶§‡ßá',\n",
       " '‡¶®‡¶ø‡¶Ø‡¶º‡ßá',\n",
       " '‡¶®‡¶ø‡ßü‡ßá',\n",
       " '‡¶®‡ßá‡¶á',\n",
       " '‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ',\n",
       " '‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞',\n",
       " '‡¶®‡ßá‡¶ì‡ßü‡¶æ',\n",
       " '‡¶®‡ßü',\n",
       " '‡¶™‡¶ï‡ßç‡¶∑‡ßá',\n",
       " '‡¶™‡¶∞',\n",
       " '‡¶™‡¶∞‡ßá',\n",
       " '‡¶™‡¶∞‡ßá‡¶á',\n",
       " '‡¶™‡¶∞‡ßá‡¶ì',\n",
       " '‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§',\n",
       " '‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ',\n",
       " '‡¶™‡¶æ‡¶ö',\n",
       " '‡¶™‡¶æ‡¶∞‡¶ø',\n",
       " '‡¶™‡¶æ‡¶∞‡ßá',\n",
       " '‡¶™‡¶æ‡¶∞‡ßá‡¶®',\n",
       " '‡¶™‡¶ø',\n",
       " '‡¶™‡ßá‡¶Ø‡¶º‡ßá',\n",
       " '‡¶™‡ßá‡ßü‡ßç‡¶∞‡ßç',\n",
       " '‡¶™‡ßç‡¶∞‡¶§‡¶ø',\n",
       " '‡¶™‡ßç‡¶∞‡¶•‡¶Æ',\n",
       " '‡¶™‡ßç‡¶∞‡¶≠‡ßÉ‡¶§‡¶ø',\n",
       " '‡¶™‡ßç‡¶∞‡¶Ø‡¶®‡ßç‡¶§',\n",
       " '‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï',\n",
       " '‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º',\n",
       " '‡¶™‡ßç‡¶∞‡¶æ‡ßü',\n",
       " '‡¶´‡¶≤‡ßá',\n",
       " '‡¶´‡¶ø‡¶∞‡ßá',\n",
       " '‡¶´‡ßá‡¶∞',\n",
       " '‡¶¨‡¶ï‡ßç‡¶§‡¶¨‡ßç‡¶Ø',\n",
       " '‡¶¨‡¶¶‡¶≤‡ßá',\n",
       " '‡¶¨‡¶®',\n",
       " '‡¶¨‡¶∞‡¶Ç',\n",
       " '‡¶¨‡¶≤‡¶§‡ßá',\n",
       " '‡¶¨‡¶≤‡¶≤',\n",
       " '‡¶¨‡¶≤‡¶≤‡ßá‡¶®',\n",
       " '‡¶¨‡¶≤‡¶æ',\n",
       " '‡¶¨‡¶≤‡ßá',\n",
       " '‡¶¨‡¶≤‡ßá‡¶õ‡ßá‡¶®',\n",
       " '‡¶¨‡¶≤‡ßá‡¶®',\n",
       " '‡¶¨‡¶∏‡ßá',\n",
       " '‡¶¨‡¶π‡ßÅ',\n",
       " '‡¶¨‡¶æ',\n",
       " '‡¶¨‡¶æ‡¶¶‡ßá',\n",
       " '‡¶¨‡¶æ‡¶∞',\n",
       " '‡¶¨‡¶ø',\n",
       " '‡¶¨‡¶ø‡¶®‡¶æ',\n",
       " '‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶®',\n",
       " '‡¶¨‡¶ø‡¶∂‡ßá‡¶∑',\n",
       " '‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ü‡¶ø',\n",
       " '‡¶¨‡ßá‡¶∂',\n",
       " '‡¶¨‡ßá‡¶∂‡¶ø',\n",
       " '‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞',\n",
       " '‡¶¨‡ßç‡¶Ø‡¶æ‡¶™‡¶æ‡¶∞‡ßá',\n",
       " '‡¶≠‡¶æ‡¶¨‡ßá',\n",
       " '‡¶≠‡¶æ‡¶¨‡ßá‡¶á',\n",
       " '‡¶Æ‡¶§‡ßã',\n",
       " '‡¶Æ‡¶§‡ßã‡¶á',\n",
       " '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶≠‡¶æ‡¶ó‡ßá',\n",
       " '‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá',\n",
       " '‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á',\n",
       " '‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶ì',\n",
       " '‡¶Æ‡¶®‡ßá',\n",
       " '‡¶Æ‡¶æ‡¶§‡ßç‡¶∞',\n",
       " '‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá',\n",
       " '‡¶Æ‡ßã‡¶ü',\n",
       " '‡¶Æ‡ßã‡¶ü‡ßá‡¶á',\n",
       " '‡¶Ø‡¶ñ‡¶®',\n",
       " '‡¶Ø‡¶§',\n",
       " '‡¶Ø‡¶§‡¶ü‡¶æ',\n",
       " '‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü',\n",
       " '‡¶Ø‡¶¶‡¶ø',\n",
       " '‡¶Ø‡¶¶‡¶ø‡¶ì',\n",
       " '‡¶Ø‡¶æ',\n",
       " '‡¶Ø‡¶æ‡¶Å‡¶∞',\n",
       " '‡¶Ø‡¶æ‡¶Å‡¶∞‡¶æ',\n",
       " '‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ',\n",
       " '‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞',\n",
       " '‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ',\n",
       " '‡¶Ø‡¶æ‡¶ï‡ßá',\n",
       " '‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá',\n",
       " '‡¶Ø‡¶æ‡¶§‡ßá',\n",
       " '‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞',\n",
       " '‡¶Ø‡¶æ‡¶®',\n",
       " '‡¶Ø‡¶æ‡¶¨‡ßá',\n",
       " '‡¶Ø‡¶æ‡¶Ø‡¶º',\n",
       " '‡¶Ø‡¶æ‡¶∞',\n",
       " '‡¶Ø‡¶æ‡¶∞‡¶æ',\n",
       " '‡¶Ø‡¶ø‡¶®‡¶ø',\n",
       " '‡¶Ø‡ßá',\n",
       " '‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá',\n",
       " '‡¶Ø‡ßá‡¶§‡ßá',\n",
       " '‡¶Ø‡ßá‡¶®',\n",
       " '‡¶Ø‡ßá‡¶Æ‡¶®',\n",
       " '‡¶∞',\n",
       " '‡¶∞‡¶ï‡¶Æ',\n",
       " '‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá',\n",
       " '‡¶∞‡¶æ‡¶ñ‡¶æ',\n",
       " '‡¶∞‡ßá‡¶ñ‡ßá',\n",
       " '‡¶≤‡¶ï‡ßç‡¶∑',\n",
       " '‡¶∂‡ßÅ‡¶ß‡ßÅ',\n",
       " '‡¶∂‡ßÅ‡¶∞‡ßÅ',\n",
       " '‡¶∏‡¶ô‡ßç‡¶ó‡ßá',\n",
       " '‡¶∏‡¶ô‡ßç‡¶ó‡ßá‡¶ì',\n",
       " '‡¶∏‡¶¨',\n",
       " '‡¶∏‡¶¨‡¶æ‡¶∞',\n",
       " '‡¶∏‡¶Æ‡¶∏‡ßç‡¶§',\n",
       " '‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø',\n",
       " '‡¶∏‡¶π',\n",
       " '‡¶∏‡¶π‡¶ø‡¶§',\n",
       " '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£',\n",
       " '‡¶∏‡¶æ‡¶Æ‡¶®‡ßá',\n",
       " '‡¶∏‡¶ø',\n",
       " '‡¶∏‡ßÅ‡¶§‡¶∞‡¶æ‡¶Ç',\n",
       " '‡¶∏‡ßá',\n",
       " '‡¶∏‡ßá‡¶á',\n",
       " '‡¶∏‡ßá‡¶ñ‡¶æ‡¶®',\n",
       " '‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá',\n",
       " '‡¶∏‡ßá‡¶ü‡¶æ',\n",
       " '‡¶∏‡ßá‡¶ü‡¶æ‡¶á',\n",
       " '‡¶∏‡ßá‡¶ü‡¶æ‡¶ì',\n",
       " '‡¶∏‡ßá‡¶ü‡¶ø',\n",
       " '‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü',\n",
       " '‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç',\n",
       " '‡¶π‡¶á‡¶§‡ßá',\n",
       " '‡¶π‡¶á‡¶¨‡ßá',\n",
       " '‡¶π‡¶á‡¶Ø‡¶º‡¶æ',\n",
       " '‡¶π‡¶ì‡¶Ø‡¶º‡¶æ',\n",
       " '‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º',\n",
       " '‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞',\n",
       " '‡¶π‡¶ö‡ßç‡¶õ‡ßá',\n",
       " '‡¶π‡¶§',\n",
       " '‡¶π‡¶§‡ßá',\n",
       " '‡¶π‡¶§‡ßá‡¶á',\n",
       " '‡¶π‡¶®',\n",
       " '‡¶π‡¶¨‡ßá',\n",
       " '‡¶π‡¶¨‡ßá‡¶®',\n",
       " '‡¶π‡¶Ø‡¶º',\n",
       " '‡¶π‡¶Ø‡¶º‡¶§‡ßã',\n",
       " '‡¶π‡¶Ø‡¶º‡¶®‡¶ø',\n",
       " '‡¶π‡¶Ø‡¶º‡ßá',\n",
       " '‡¶π‡¶Ø‡¶º‡ßá‡¶á',\n",
       " '‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤',\n",
       " '‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',\n",
       " '‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®',\n",
       " '‡¶π‡¶≤',\n",
       " '‡¶π‡¶≤‡ßá',\n",
       " '‡¶π‡¶≤‡ßá‡¶á',\n",
       " '‡¶π‡¶≤‡ßá‡¶ì',\n",
       " '‡¶π‡¶≤‡ßã',\n",
       " '‡¶π‡¶æ‡¶ú‡¶æ‡¶∞',\n",
       " '‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá',\n",
       " '‡¶π‡ßà‡¶≤‡ßá',\n",
       " '‡¶π‡ßã‡¶ï',\n",
       " '‡¶π‡ßü']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from nltk.corpus import stopwords\n",
    "stopwords.words('bengali')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "35eb7456",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:43.116008Z",
     "iopub.status.busy": "2024-04-16T20:17:43.115699Z",
     "iopub.status.idle": "2024-04-16T20:17:43.122263Z",
     "shell.execute_reply": "2024-04-16T20:17:43.121434Z"
    },
    "papermill": {
     "duration": 0.031539,
     "end_time": "2024-04-16T20:17:43.124390",
     "exception": false,
     "start_time": "2024-04-16T20:17:43.092851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "import string\n",
    "\n",
    "def transform_text(text):\n",
    "    text = nltk.word_tokenize(text)\n",
    "\n",
    "    y = []\n",
    "    for i in text:\n",
    "        i = re.sub(r'\\W+', '', i)\n",
    "        if i:\n",
    "            y.append(i)\n",
    "\n",
    "    text = y[:]\n",
    "    y.clear()\n",
    "    \n",
    "    for i in text:\n",
    "        if i not in stopwords.words('bengali') and i not in string.punctuation:\n",
    "            y.append(i)\n",
    "             \n",
    "    return \" \".join(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8eec9a3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:43.169843Z",
     "iopub.status.busy": "2024-04-16T20:17:43.169513Z",
     "iopub.status.idle": "2024-04-16T20:17:43.184759Z",
     "shell.execute_reply": "2024-04-16T20:17:43.183762Z"
    },
    "papermill": {
     "duration": 0.040015,
     "end_time": "2024-04-16T20:17:43.186681",
     "exception": false,
     "start_time": "2024-04-16T20:17:43.146666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‡¶®‡¶∞ ‡¶π‡¶á‡¶≤ ‡¶ö‡¶∞ ‡¶§‡¶Æ ‡¶π‡¶á‡¶≤ ‡¶≠‡¶≤ ‡¶≠‡¶∑‡¶£‡¶∞ ‡¶Ü‡¶ô‡¶ó‡¶≤ ‡¶§‡¶≤‡¶§ ‡¶ó‡¶Ø ‡¶ö‡¶¶‡¶∞ ‡¶Ü‡¶ô‡¶ó‡¶≤ ‡¶§‡¶≤ ‡¶π‡¶Ø‡¶∞ ‡¶ï‡¶™‡¶≤ ‡¶π‡¶Ø‡¶∞ ‡¶ï‡¶™‡¶≤ ‡¶ï ‡¶Ø‡¶ó‡¶ü ‡¶Ü‡¶∏‡¶≤ ‡¶ó‡¶ß‡¶∞ ‡¶Æ‡¶§ ‡¶ú‡¶û‡¶® ‡¶®‡¶Ø ‡¶¨‡¶∂‡¶≤‡¶∑‡¶£ ‡¶¨‡¶∏‡¶≤ ‡¶®‡¶∞‡¶∞ ‡¶Æ‡¶§ ‡¶π‡¶∞‡¶ï‡¶ñ‡¶£‡¶° ‡¶¨‡¶ï ‡¶ü‡¶® ‡¶∞‡¶ñ‡¶¨ ‡¶§‡¶∞‡¶Æ‡¶§ ‡¶ú‡¶§‡¶ï ‡¶Ü‡¶Æ ‡¶™‡¶Ø ‡¶•‡¶ï‡¶¨\n",
      "141\n"
     ]
    }
   ],
   "source": [
    "# Test the function\n",
    "result = transform_text('‡¶®‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶á‡¶≤‡ßã ‡¶ö‡ßã‡¶∞‡¶æ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶π‡¶á‡¶≤‡¶æ ‡¶≠‡¶æ‡¶≤ ‡¶≠‡¶æ‡¶∑‡¶£‡ßá‡¶∞ ‡¶Ü‡¶ô‡ßç‡¶ó‡ßÅ‡¶≤ ‡¶§‡ßÅ‡¶≤‡¶§‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ö‡ßã‡¶¶‡¶∞ ‡¶Ü‡¶ô‡ßç‡¶ó‡ßÅ‡¶≤ ‡¶§‡ßã‡¶≤  ‡¶π‡¶æ‡¶Ø‡¶º‡¶∞‡ßá ‡¶ï‡¶™‡¶æ‡¶≤ ‡¶π‡¶æ‡¶Ø‡¶º‡¶∞‡ßá ‡¶ï‡¶™‡¶æ‡¶≤ ‡¶ï‡¶ø ‡¶Ø‡ßÅ‡¶ó‡¶ü‡¶æ ‡¶Ü‡¶ú ‡¶Ü‡¶∏‡¶≤‡ßã? ‡¶ó‡¶æ‡¶ß‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶¨‡¶∏‡¶≤‡¶æ‡ßá  ‡¶®‡ßÇ‡¶∞‡ßÅ‡¶∞ ‡¶Æ‡¶§ ‡¶π‡ßÄ‡¶∞‡¶ï‡¶ñ‡¶£‡ßç‡¶° ‡¶¨‡ßÅ‡¶ï‡ßá ‡¶ü‡ßá‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßã ‡¶§‡ßã‡¶∞‡¶Æ‡¶§ ‡¶ú‡ßÅ‡¶§‡ßã‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶™‡¶æ‡¶Ø‡¶º‡ßá ‡¶™‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßã')\n",
    "print(result)\n",
    "print(len(result))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fe01cf77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:43.231289Z",
     "iopub.status.busy": "2024-04-16T20:17:43.231036Z",
     "iopub.status.idle": "2024-04-16T20:17:43.235629Z",
     "shell.execute_reply": "2024-04-16T20:17:43.234870Z"
    },
    "papermill": {
     "duration": 0.029178,
     "end_time": "2024-04-16T20:17:43.237507",
     "exception": false,
     "start_time": "2024-04-16T20:17:43.208329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‡¶®‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶á‡¶≤‡ßã ‡¶ö‡ßã‡¶∞‡¶æ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶π‡¶á‡¶≤‡¶æ ‡¶≠‡¶æ‡¶≤ ‡¶≠‡¶æ‡¶∑‡¶£‡ßá‡¶∞ ‡¶Ü‡¶ô‡ßç‡¶ó‡ßÅ‡¶≤ ‡¶§‡ßÅ‡¶≤‡¶§‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ö‡ßã‡¶¶‡¶∞ ‡¶Ü‡¶ô‡ßç‡¶ó‡ßÅ‡¶≤ ‡¶§‡ßã‡¶≤  ‡¶π‡¶æ‡¶Ø‡¶º‡¶∞‡ßá ‡¶ï‡¶™‡¶æ‡¶≤ ‡¶π‡¶æ‡¶Ø‡¶º‡¶∞‡ßá ‡¶ï‡¶™‡¶æ‡¶≤ ‡¶ï‡¶ø ‡¶Ø‡ßÅ‡¶ó‡¶ü‡¶æ ‡¶Ü‡¶ú ‡¶Ü‡¶∏‡¶≤‡ßã? ‡¶ó‡¶æ‡¶ß‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶¨‡¶∏‡¶≤‡¶æ‡ßá  ‡¶®‡ßÇ‡¶∞‡ßÅ‡¶∞ ‡¶Æ‡¶§ ‡¶π‡ßÄ‡¶∞‡¶ï‡¶ñ‡¶£‡ßç‡¶° ‡¶¨‡ßÅ‡¶ï‡ßá ‡¶ü‡ßá‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßã ‡¶§‡ßã‡¶∞‡¶Æ‡¶§ ‡¶ú‡ßÅ‡¶§‡ßã‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶™‡¶æ‡¶Ø‡¶º‡ßá ‡¶™‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßã\n",
      "218\n"
     ]
    }
   ],
   "source": [
    "a=df['text'][1000]\n",
    "print(a)\n",
    "print(len(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2e05df98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:17:43.282152Z",
     "iopub.status.busy": "2024-04-16T20:17:43.281856Z",
     "iopub.status.idle": "2024-04-16T20:19:25.911223Z",
     "shell.execute_reply": "2024-04-16T20:19:25.910425Z"
    },
    "papermill": {
     "duration": 102.654592,
     "end_time": "2024-04-16T20:19:25.913603",
     "exception": false,
     "start_time": "2024-04-16T20:17:43.259011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['transformed_text'] = df['text'].apply(transform_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cb1cdda3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:25.961959Z",
     "iopub.status.busy": "2024-04-16T20:19:25.961194Z",
     "iopub.status.idle": "2024-04-16T20:19:25.967527Z",
     "shell.execute_reply": "2024-04-16T20:19:25.966677Z"
    },
    "papermill": {
     "duration": 0.032628,
     "end_time": "2024-04-16T20:19:25.969721",
     "exception": false,
     "start_time": "2024-04-16T20:19:25.937093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'‡ß®‡ß¶‡ßß‡ßÆ‡¶∞ ‡¶∏‡¶¨‡¶ö‡ßü ‡¶¨‡ßú ‡¶∞‡¶ú‡¶ï‡¶∞ ‡¶Ü‡¶™‡¶®'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['transformed_text'][7968]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "eb8c0140",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:26.018934Z",
     "iopub.status.busy": "2024-04-16T20:19:26.018121Z",
     "iopub.status.idle": "2024-04-16T20:19:26.032697Z",
     "shell.execute_reply": "2024-04-16T20:19:26.031807Z"
    },
    "papermill": {
     "duration": 0.04165,
     "end_time": "2024-04-16T20:19:26.034892",
     "exception": false,
     "start_time": "2024-04-16T20:19:25.993242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>transformed_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10567</th>\n",
       "      <td>‡¶™‡¶æ‡¶™‡ßã‡¶®‡ßç‡¶¶‡¶æ ‡¶ï‡ßá ‡¶ü‡ßÅ‡¶ü ‡¶ü‡ßÅ‡¶ü</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶™‡¶™‡¶®‡¶¶ ‡¶ï ‡¶ü‡¶ü ‡¶ü‡¶ü</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12491</th>\n",
       "      <td>‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶ß‡¶®‡¶Ø‡¶¨‡¶¶ ‡¶ï‡¶Æ‡¶≤‡¶≤</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22497</th>\n",
       "      <td>‡¶Ö‡¶™‡ßÅ ‡¶â‡¶ï‡¶ø‡¶≤ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßú ‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ‡¶ö‡¶æ‡¶∞</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶Ö‡¶™ ‡¶â‡¶ï‡¶≤ ‡¶Ü‡¶™‡¶® ‡¶¨‡ßú ‡¶Æ‡¶•‡¶Ø‡¶ö‡¶∞</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24744</th>\n",
       "      <td>‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡ßá‡ßü‡¶æ ‡¶ï‡¶∏‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡¶∏‡ßá‡¶∞ ‡¶∏‡ßå‡¶ú‡¶®‡ßç‡¶Ø ‡¶ó‡¶ø‡¶´‡¶ü...</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶∏‡¶Ø‡¶∞‡¶∞ ‡¶ú‡¶®‡¶Ø ‡¶∞‡ßü‡¶õ ‡¶ï‡ßü ‡¶ï‡¶∏‡¶Æ‡¶ü‡¶ï‡¶∏‡¶∞ ‡¶∏‡¶ú‡¶®‡¶Ø ‡¶ó‡¶´‡¶ü ‡¶π‡¶Ø‡¶Æ‡¶™‡¶∞ ‡¶∏‡¶á ‡¶∏‡¶• ‡¶•...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19586</th>\n",
       "      <td>‡¶Ü‡¶Æ‡¶ø ‡¶π‡¶≤‡ßá ‡¶∏‡¶¨ ‡¶ï‡ßü‡¶ü‡¶æ‡¶ï‡ßá ‡¶Æ‡¶æ‡¶∞‡¶§‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡¶æ‡¶Æ ‡¶Æ‡¶æ‡¶Æ‡ßÅ‡¶®‡ßÅ‡¶≤ ‡¶π‡¶ï ...</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶Ü‡¶Æ ‡¶ï‡ßü‡¶ü‡¶ï ‡¶Æ‡¶∞‡¶§ ‡¶∂‡¶∞ ‡¶ï‡¶∞‡¶§‡¶Æ ‡¶Æ‡¶Æ‡¶®‡¶≤ ‡¶π‡¶ï ‡¶∏‡¶π‡¶¨‡¶∞ ‡¶Æ‡¶• ‡¶ñ‡¶¨ ‡¶†‡¶®‡¶° ‡¶õ‡¶≤</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23189</th>\n",
       "      <td>‡¶ï‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßç‡¶Ø‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶Ü‡¶∞ ‡¶ñ‡¶æ‡¶≤‡ßá‡¶¶‡¶æ ‡¶ö‡ßã‡¶∞ ‡¶è‡¶§‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶ü‡¶æ‡¶ï...</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶ï‡¶¶‡¶∞ ‡¶∏‡¶Ø‡¶∞ ‡¶≠‡¶≤ ‡¶Æ‡¶®‡¶∑ ‡¶ñ‡¶≤‡¶¶ ‡¶ö‡¶∞ ‡¶è‡¶§‡¶Æ‡¶∞ ‡¶ü‡¶ï ‡¶Æ‡¶∞‡¶¶‡ßü‡¶õ ‡¶¨ ‡¶è‡¶® ‡¶™ ‡¶ú‡¶∞ ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23062</th>\n",
       "      <td>‡¶Ö‡¶®‡ßá‡¶ï ‡¶ö‡¶æ‡¶≤‡¶ï ‡¶π‡ßü‡ßá‡¶õ‡ßá‡¶® ‡¶è‡¶ï ‡¶ú‡¶® ‡¶ï‡ßá ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá‡•§ ‡¶Ö‡¶®‡ßç...</td>\n",
       "      <td>0</td>\n",
       "      <td>114</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶Ö‡¶®‡¶ï ‡¶ö‡¶≤‡¶ï ‡¶π‡ßü‡¶õ‡¶® ‡¶è‡¶ï ‡¶ï ‡¶¨‡¶≤‡¶∞ ‡¶∏‡¶Ø‡¶ó ‡¶¶‡ßü ‡¶Ö‡¶®‡¶Ø ‡¶ú‡¶®‡¶ï ‡¶ñ‡¶¨ ‡¶ï‡¶Æ ‡¶∏‡¶Æ‡ßü...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18201</th>\n",
       "      <td>‡¶ú‡¶æ‡¶¶‡ßá‡¶ñ‡ßá‡¶Ü‡¶∞‡¶ï‡ßã‡¶®‡ßã‡¶¶‡¶ø‡¶®</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶ú‡¶¶‡¶ñ‡¶Ü‡¶∞‡¶ï‡¶®‡¶¶‡¶®</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29000</th>\n",
       "      <td>‡¶ï‡¶ø ‡¶Ø‡ßá ‡¶π‡¶¨‡ßá ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∏‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡ßã ‡¶®‡¶ø‡ßü‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶∏‡ßç...</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶ï ‡¶Ø ‡¶π‡¶¨ ‡¶¶‡¶∂‡¶∞ ‡¶Ö‡¶¨‡¶∏‡¶• ‡¶∏‡¶¨‡¶á ‡¶≤‡¶ó‡¶® ‡¶¨‡¶Ø‡¶∏‡¶§ ‡¶õ‡¶¨</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6848</th>\n",
       "      <td>‡¶ö‡ßã‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡ßü‡ßá‡¶∞ ‡¶¨‡ßú ‡¶ó‡¶≤‡¶æ ‡¶â‡¶™‡ßÅ ‡¶â‡¶ï‡¶ø‡¶≤ ‡¶§‡ßÅ‡¶á</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>‡¶ö‡¶∞‡¶∞ ‡¶Æ‡ßü‡¶∞ ‡¶¨‡ßú ‡¶ó‡¶≤ ‡¶â‡¶™ ‡¶â‡¶ï‡¶≤ ‡¶§‡¶á</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  target  \\\n",
       "10567                                ‡¶™‡¶æ‡¶™‡ßã‡¶®‡ßç‡¶¶‡¶æ ‡¶ï‡ßá ‡¶ü‡ßÅ‡¶ü ‡¶ü‡ßÅ‡¶ü       0   \n",
       "12491                                   ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ       0   \n",
       "22497                         ‡¶Ö‡¶™‡ßÅ ‡¶â‡¶ï‡¶ø‡¶≤ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡ßú ‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ‡¶ö‡¶æ‡¶∞       0   \n",
       "24744  ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡ßá‡ßü‡¶æ ‡¶ï‡¶∏‡¶Æ‡ßá‡¶ü‡¶ø‡¶ï‡¶∏‡ßá‡¶∞ ‡¶∏‡ßå‡¶ú‡¶®‡ßç‡¶Ø ‡¶ó‡¶ø‡¶´‡¶ü...       0   \n",
       "19586  ‡¶Ü‡¶Æ‡¶ø ‡¶π‡¶≤‡ßá ‡¶∏‡¶¨ ‡¶ï‡ßü‡¶ü‡¶æ‡¶ï‡ßá ‡¶Æ‡¶æ‡¶∞‡¶§‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡¶æ‡¶Æ ‡¶Æ‡¶æ‡¶Æ‡ßÅ‡¶®‡ßÅ‡¶≤ ‡¶π‡¶ï ...       0   \n",
       "23189  ‡¶ï‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßç‡¶Ø‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶Ü‡¶∞ ‡¶ñ‡¶æ‡¶≤‡ßá‡¶¶‡¶æ ‡¶ö‡ßã‡¶∞ ‡¶è‡¶§‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶ü‡¶æ‡¶ï...       0   \n",
       "23062  ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ö‡¶æ‡¶≤‡¶ï ‡¶π‡ßü‡ßá‡¶õ‡ßá‡¶® ‡¶è‡¶ï ‡¶ú‡¶® ‡¶ï‡ßá ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá‡•§ ‡¶Ö‡¶®‡ßç...       0   \n",
       "18201                                    ‡¶ú‡¶æ‡¶¶‡ßá‡¶ñ‡ßá‡¶Ü‡¶∞‡¶ï‡ßã‡¶®‡ßã‡¶¶‡¶ø‡¶®       0   \n",
       "29000  ‡¶ï‡¶ø ‡¶Ø‡ßá ‡¶π‡¶¨‡ßá ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∏‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡ßã ‡¶®‡¶ø‡ßü‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶∏‡ßç...       0   \n",
       "6848                     ‡¶ö‡ßã‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡ßü‡ßá‡¶∞ ‡¶¨‡ßú ‡¶ó‡¶≤‡¶æ ‡¶â‡¶™‡ßÅ ‡¶â‡¶ï‡¶ø‡¶≤ ‡¶§‡ßÅ‡¶á       1   \n",
       "\n",
       "       num_characters  num_words  num_sentences  \\\n",
       "10567              19          4              1   \n",
       "12491              16          2              1   \n",
       "22497              26          5              1   \n",
       "24744             122         19              1   \n",
       "19586              74         14              1   \n",
       "23189              97         19              1   \n",
       "23062             114         24              1   \n",
       "18201              15          1              1   \n",
       "29000              60         13              1   \n",
       "6848               31          7              1   \n",
       "\n",
       "                                        transformed_text  \n",
       "10567                                       ‡¶™‡¶™‡¶®‡¶¶ ‡¶ï ‡¶ü‡¶ü ‡¶ü‡¶ü  \n",
       "12491                                         ‡¶ß‡¶®‡¶Ø‡¶¨‡¶¶ ‡¶ï‡¶Æ‡¶≤‡¶≤  \n",
       "22497                                ‡¶Ö‡¶™ ‡¶â‡¶ï‡¶≤ ‡¶Ü‡¶™‡¶® ‡¶¨‡ßú ‡¶Æ‡¶•‡¶Ø‡¶ö‡¶∞  \n",
       "24744  ‡¶∏‡¶Ø‡¶∞‡¶∞ ‡¶ú‡¶®‡¶Ø ‡¶∞‡ßü‡¶õ ‡¶ï‡ßü ‡¶ï‡¶∏‡¶Æ‡¶ü‡¶ï‡¶∏‡¶∞ ‡¶∏‡¶ú‡¶®‡¶Ø ‡¶ó‡¶´‡¶ü ‡¶π‡¶Ø‡¶Æ‡¶™‡¶∞ ‡¶∏‡¶á ‡¶∏‡¶• ‡¶•...  \n",
       "19586      ‡¶Ü‡¶Æ ‡¶ï‡ßü‡¶ü‡¶ï ‡¶Æ‡¶∞‡¶§ ‡¶∂‡¶∞ ‡¶ï‡¶∞‡¶§‡¶Æ ‡¶Æ‡¶Æ‡¶®‡¶≤ ‡¶π‡¶ï ‡¶∏‡¶π‡¶¨‡¶∞ ‡¶Æ‡¶• ‡¶ñ‡¶¨ ‡¶†‡¶®‡¶° ‡¶õ‡¶≤  \n",
       "23189  ‡¶ï‡¶¶‡¶∞ ‡¶∏‡¶Ø‡¶∞ ‡¶≠‡¶≤ ‡¶Æ‡¶®‡¶∑ ‡¶ñ‡¶≤‡¶¶ ‡¶ö‡¶∞ ‡¶è‡¶§‡¶Æ‡¶∞ ‡¶ü‡¶ï ‡¶Æ‡¶∞‡¶¶‡ßü‡¶õ ‡¶¨ ‡¶è‡¶® ‡¶™ ‡¶ú‡¶∞ ...  \n",
       "23062  ‡¶Ö‡¶®‡¶ï ‡¶ö‡¶≤‡¶ï ‡¶π‡ßü‡¶õ‡¶® ‡¶è‡¶ï ‡¶ï ‡¶¨‡¶≤‡¶∞ ‡¶∏‡¶Ø‡¶ó ‡¶¶‡ßü ‡¶Ö‡¶®‡¶Ø ‡¶ú‡¶®‡¶ï ‡¶ñ‡¶¨ ‡¶ï‡¶Æ ‡¶∏‡¶Æ‡ßü...  \n",
       "18201                                          ‡¶ú‡¶¶‡¶ñ‡¶Ü‡¶∞‡¶ï‡¶®‡¶¶‡¶®  \n",
       "29000                    ‡¶ï ‡¶Ø ‡¶π‡¶¨ ‡¶¶‡¶∂‡¶∞ ‡¶Ö‡¶¨‡¶∏‡¶• ‡¶∏‡¶¨‡¶á ‡¶≤‡¶ó‡¶® ‡¶¨‡¶Ø‡¶∏‡¶§ ‡¶õ‡¶¨  \n",
       "6848                             ‡¶ö‡¶∞‡¶∞ ‡¶Æ‡ßü‡¶∞ ‡¶¨‡ßú ‡¶ó‡¶≤ ‡¶â‡¶™ ‡¶â‡¶ï‡¶≤ ‡¶§‡¶á  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5f03e6ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:26.086593Z",
     "iopub.status.busy": "2024-04-16T20:19:26.085583Z",
     "iopub.status.idle": "2024-04-16T20:19:26.148607Z",
     "shell.execute_reply": "2024-04-16T20:19:26.147752Z"
    },
    "papermill": {
     "duration": 0.089985,
     "end_time": "2024-04-16T20:19:26.150551",
     "exception": false,
     "start_time": "2024-04-16T20:19:26.060566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('‡¶§‡¶∞', 2312),\n",
       " ('‡¶ï', 2249),\n",
       " ('‡¶ï‡¶∞', 1960),\n",
       " ('‡¶®', 1855),\n",
       " ('‡¶§‡¶á', 1220),\n",
       " ('‡¶ï‡¶®', 1096),\n",
       " ('‡¶è‡¶ï‡¶ü', 1009),\n",
       " ('‡¶¨‡¶ö‡¶ö', 991),\n",
       " ('‡¶ö‡¶¶', 938),\n",
       " ('‡¶¶‡ßü', 925),\n",
       " ('‡¶Æ‡¶ó', 907),\n",
       " ('‡¶Æ‡¶∞', 855),\n",
       " ('‡¶§', 815),\n",
       " ('‡¶¨‡¶≤', 764),\n",
       " ('‡¶Æ‡¶ó‡¶∞', 745),\n",
       " ('‡¶ï‡¶§‡¶§‡¶∞', 673),\n",
       " ('‡¶ó‡¶≤', 667),\n",
       " ('‡¶∂‡¶≤', 643),\n",
       " ('‡¶®‡¶á', 637),\n",
       " ('‡¶ñ‡¶®‡¶ï‡¶∞', 628),\n",
       " ('‡¶™‡¶≤', 589),\n",
       " ('‡¶ú‡¶§', 587),\n",
       " ('‡¶Ø', 575),\n",
       " ('‡¶Æ‡¶§', 564),\n",
       " ('‡¶ï‡¶õ', 551),\n",
       " ('‡¶•‡¶ï', 543),\n",
       " ('‡¶Æ‡¶®', 539),\n",
       " ('‡¶∏‡¶≤', 538),\n",
       " ('‡¶Ü‡¶Æ‡¶∞', 532),\n",
       " ('‡¶ï‡¶•', 529)]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spam_corpus = []\n",
    "for msg in df[df['target'] == 1]['transformed_text'].tolist():\n",
    "    for word in msg.split():\n",
    "        spam_corpus.append(word)\n",
    "len(spam_corpus)\n",
    "from collections import Counter\n",
    "words=Counter(spam_corpus)\n",
    "words.most_common(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ea86edc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:26.198066Z",
     "iopub.status.busy": "2024-04-16T20:19:26.197461Z",
     "iopub.status.idle": "2024-04-16T20:19:26.334446Z",
     "shell.execute_reply": "2024-04-16T20:19:26.333574Z"
    },
    "papermill": {
     "duration": 0.162638,
     "end_time": "2024-04-16T20:19:26.336626",
     "exception": false,
     "start_time": "2024-04-16T20:19:26.173988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('‡¶®', 5378),\n",
       " ('‡¶ï‡¶∞', 5328),\n",
       " ('‡¶ï', 4789),\n",
       " ('‡¶ï‡¶®', 2726),\n",
       " ('‡¶Ü‡¶Æ‡¶∞', 2591),\n",
       " ('‡¶§‡¶∞', 2526),\n",
       " ('‡¶≠‡¶≤', 2191),\n",
       " ('‡¶è‡¶ï‡¶ü', 1947),\n",
       " ('‡¶Ü‡¶™‡¶®‡¶∞', 1876),\n",
       " ('‡¶§', 1842),\n",
       " ('‡¶ï‡¶õ', 1724),\n",
       " ('‡¶•‡¶ï', 1681),\n",
       " ('‡¶Ü‡¶Æ', 1670),\n",
       " ('‡¶Ø', 1660),\n",
       " ('‡¶¨‡¶≤', 1596),\n",
       " ('‡¶ï‡¶•', 1569),\n",
       " ('‡¶ú‡¶®‡¶Ø', 1555),\n",
       " ('‡¶≠‡¶á', 1508),\n",
       " ('‡¶®‡¶á', 1490),\n",
       " ('‡¶Æ‡¶®', 1451),\n",
       " ('‡¶¶‡ßü', 1411),\n",
       " ('‡¶Ü‡¶™‡¶®', 1399),\n",
       " ('‡¶ï‡¶∞‡¶®', 1381),\n",
       " ('‡¶π‡¶¨', 1351),\n",
       " ('‡¶Ü‡¶õ', 1306),\n",
       " ('‡¶Ö‡¶®‡¶ï', 1287),\n",
       " ('‡¶ó‡¶≤', 1269),\n",
       " ('‡¶Æ‡¶§', 1160),\n",
       " ('‡¶∏‡¶•', 1064),\n",
       " ('‡¶Æ‡¶®‡¶∑', 1058)]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ham_corpus = []\n",
    "for msg in df[df['target'] == 0]['transformed_text'].tolist():\n",
    "    for word in msg.split():\n",
    "        ham_corpus.append(word)\n",
    "len(ham_corpus)\n",
    "from collections import Counter\n",
    "words=Counter(ham_corpus)\n",
    "words.most_common(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80573c68",
   "metadata": {
    "papermill": {
     "duration": 0.023437,
     "end_time": "2024-04-16T20:19:26.383221",
     "exception": false,
     "start_time": "2024-04-16T20:19:26.359784",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4. Model Building"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "277a0192",
   "metadata": {
    "papermill": {
     "duration": 0.022927,
     "end_time": "2024-04-16T20:19:26.429408",
     "exception": false,
     "start_time": "2024-04-16T20:19:26.406481",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 1. CountVectorizer\n",
    "### 2. TFIDFVectorizer\n",
    "### here we found TFIDF Vectorizer performing better than Count Vectorizing and 5000 max_feature(hyperparameter) is giving better output when applying TFIDF Vectorizer "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "64d73c0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:26.478724Z",
     "iopub.status.busy": "2024-04-16T20:19:26.477866Z",
     "iopub.status.idle": "2024-04-16T20:19:26.486362Z",
     "shell.execute_reply": "2024-04-16T20:19:26.485560Z"
    },
    "papermill": {
     "duration": 0.035335,
     "end_time": "2024-04-16T20:19:26.488434",
     "exception": false,
     "start_time": "2024-04-16T20:19:26.453099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB,MultinomialNB,BernoulliNB\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix,precision_score\n",
    "from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# cv = CountVectorizer()\n",
    "# X = cv.fit_transform(df['transformed_text']).toarray()\n",
    "# X.shape # text, words\n",
    "# y = df['target'].values\n",
    "# X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)\n",
    "# #model building\n",
    "# gnb = GaussianNB()\n",
    "# mnb = MultinomialNB()\n",
    "# bnb = BernoulliNB()\n",
    "# gnb.fit(X_train,y_train)\n",
    "# print(\"GaussianNB\")\n",
    "# y_pred1 = gnb.predict(X_test)\n",
    "# print(accuracy_score(y_test,y_pred1))\n",
    "# print(confusion_matrix(y_test,y_pred1))\n",
    "# print(precision_score(y_test,y_pred1))\n",
    "# mnb.fit(X_train,y_train)\n",
    "# print(\"MultinomialNB\")\n",
    "# y_pred2 = mnb.predict(X_test)\n",
    "# print(accuracy_score(y_test,y_pred2))\n",
    "# print(confusion_matrix(y_test,y_pred2))\n",
    "# print(precision_score(y_test,y_pred2))\n",
    "# bnb.fit(X_train,y_train)\n",
    "# print(\"BernouliNB\")\n",
    "# y_pred3 = bnb.predict(X_test)\n",
    "# print(accuracy_score(y_test,y_pred3))\n",
    "# print(confusion_matrix(y_test,y_pred3))\n",
    "# print(precision_score(y_test,y_pred3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b3e1ec00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:26.538488Z",
     "iopub.status.busy": "2024-04-16T20:19:26.538159Z",
     "iopub.status.idle": "2024-04-16T20:19:34.984709Z",
     "shell.execute_reply": "2024-04-16T20:19:34.981005Z"
    },
    "papermill": {
     "duration": 8.475542,
     "end_time": "2024-04-16T20:19:34.988663",
     "exception": false,
     "start_time": "2024-04-16T20:19:26.513121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GaussianNB\n",
      "0.6447346392097774\n",
      "[[2142 1836]\n",
      " [ 286 1709]]\n",
      "0.4820874471086037\n",
      "MultinomialNB\n",
      "0.8458061275740834\n",
      "[[3712  266]\n",
      " [ 655 1340]]\n",
      "0.8343711083437111\n",
      "BernouliNB\n",
      "0.8299012221664155\n",
      "[[3340  638]\n",
      " [ 378 1617]]\n",
      "0.7170731707317073\n",
      "CPU times: user 7.54 s, sys: 2.53 s, total: 10.1 s\n",
      "Wall time: 8.42 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1,3))\n",
    "X = tfidf.fit_transform(df['transformed_text']).toarray()\n",
    "X.shape # sms, words\n",
    "y = df['target'].values\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)\n",
    "from sklearn.naive_bayes import GaussianNB,MultinomialNB,BernoulliNB\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix,precision_score\n",
    "gnb = GaussianNB()\n",
    "mnb = MultinomialNB()\n",
    "bnb = BernoulliNB()\n",
    "gnb.fit(X_train,y_train)\n",
    "print(\"GaussianNB\")\n",
    "y_pred1 = gnb.predict(X_test)\n",
    "print(accuracy_score(y_test,y_pred1))\n",
    "print(confusion_matrix(y_test,y_pred1))\n",
    "print(precision_score(y_test,y_pred1))\n",
    "mnb.fit(X_train,y_train)\n",
    "print(\"MultinomialNB\")\n",
    "y_pred2 = mnb.predict(X_test)\n",
    "print(accuracy_score(y_test,y_pred2))\n",
    "print(confusion_matrix(y_test,y_pred2))\n",
    "print(precision_score(y_test,y_pred2))\n",
    "bnb.fit(X_train,y_train)\n",
    "y_pred3 = bnb.predict(X_test)\n",
    "print(\"BernouliNB\")\n",
    "print(accuracy_score(y_test,y_pred3))\n",
    "print(confusion_matrix(y_test,y_pred3))\n",
    "print(precision_score(y_test,y_pred3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c053f57d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:35.098872Z",
     "iopub.status.busy": "2024-04-16T20:19:35.098453Z",
     "iopub.status.idle": "2024-04-16T20:19:35.384554Z",
     "shell.execute_reply": "2024-04-16T20:19:35.383564Z"
    },
    "papermill": {
     "duration": 0.337927,
     "end_time": "2024-04-16T20:19:35.387047",
     "exception": false,
     "start_time": "2024-04-16T20:19:35.049120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.ensemble import BaggingClassifier\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from xgboost import XGBClassifier\n",
    "svc = SVC(kernel='sigmoid', gamma=1.0)\n",
    "knc = KNeighborsClassifier()\n",
    "mnb = MultinomialNB()\n",
    "dtc = DecisionTreeClassifier(max_depth=5)\n",
    "lrc = LogisticRegression(solver='liblinear', penalty='l1')\n",
    "rfc = RandomForestClassifier(n_estimators=50, random_state=2)\n",
    "abc = AdaBoostClassifier(n_estimators=50, random_state=2)\n",
    "etc = ExtraTreesClassifier(n_estimators=50, random_state=2)\n",
    "gbdt = GradientBoostingClassifier(n_estimators=50,random_state=2)\n",
    "xgb = XGBClassifier(n_estimators=50,random_state=2)\n",
    "clfs = {\n",
    "    'KN' : knc, \n",
    "    'NB': mnb, \n",
    "    'DT': dtc, \n",
    "    'LR': lrc, \n",
    "    'RF': rfc, \n",
    "    'AdaBoost': abc, \n",
    "    'ETC': etc,\n",
    "    'GBDT':gbdt,\n",
    "    'xgb':xgb,\n",
    "    'SVC': svc\n",
    "}\n",
    "from sklearn.metrics import accuracy_score, precision_score\n",
    "\n",
    "def train_classifier(clf,X_train,y_train,X_test,y_test):\n",
    "    clf.fit(X_train,y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test,y_pred)\n",
    "    precision = precision_score(y_test,y_pred)\n",
    "    \n",
    "    return accuracy,precision\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9c5f46b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:35.436716Z",
     "iopub.status.busy": "2024-04-16T20:19:35.436035Z",
     "iopub.status.idle": "2024-04-16T20:19:35.775285Z",
     "shell.execute_reply": "2024-04-16T20:19:35.773788Z"
    },
    "papermill": {
     "duration": 0.367707,
     "end_time": "2024-04-16T20:19:35.778947",
     "exception": false,
     "start_time": "2024-04-16T20:19:35.411240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8458061275740834, 0.8343711083437111)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_classifier(mnb,X_train,y_train,X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9881c5f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:19:35.891345Z",
     "iopub.status.busy": "2024-04-16T20:19:35.891008Z",
     "iopub.status.idle": "2024-04-16T20:51:41.015893Z",
     "shell.execute_reply": "2024-04-16T20:51:41.014783Z"
    },
    "papermill": {
     "duration": 1925.206395,
     "end_time": "2024-04-16T20:51:41.042899",
     "exception": false,
     "start_time": "2024-04-16T20:19:35.836504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For  KN\n",
      "Accuracy -  0.7379876109157877\n",
      "Precision -  0.8019662921348315\n",
      "For  NB\n",
      "Accuracy -  0.8458061275740834\n",
      "Precision -  0.8343711083437111\n",
      "For  DT\n",
      "Accuracy -  0.7619286790557509\n",
      "Precision -  0.9029535864978903\n",
      "For  LR\n",
      "Accuracy -  0.8699146157709694\n",
      "Precision -  0.8763906056860321\n",
      "For  RF\n",
      "Accuracy -  0.8652268541771304\n",
      "Precision -  0.8396118721461188\n",
      "For  AdaBoost\n",
      "Accuracy -  0.8504938891679223\n",
      "Precision -  0.8461055276381909\n",
      "For  ETC\n",
      "Accuracy -  0.8652268541771304\n",
      "Precision -  0.8298226164079823\n",
      "For  GBDT\n",
      "Accuracy -  0.8089737150510631\n",
      "Precision -  0.9137596899224806\n",
      "For  xgb\n",
      "Accuracy -  0.8536748702494559\n",
      "Precision -  0.8820722563053851\n",
      "For  SVC\n",
      "Accuracy -  0.8680729951448184\n",
      "Precision -  0.868662186927306\n",
      "CPU times: user 33min 37s, sys: 11.7 s, total: 33min 49s\n",
      "Wall time: 32min 5s\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "accuracy_scores = []\n",
    "precision_scores = []\n",
    "\n",
    "for name,clf in clfs.items():\n",
    "    \n",
    "    current_accuracy,current_precision = train_classifier(clf, X_train,y_train,X_test,y_test)\n",
    "    \n",
    "    print(\"For \",name)\n",
    "    print(\"Accuracy - \",current_accuracy)\n",
    "    print(\"Precision - \",current_precision)\n",
    "    accuracy_scores.append(current_accuracy)\n",
    "    precision_scores.append(current_precision)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "1d406c09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:51:41.093081Z",
     "iopub.status.busy": "2024-04-16T20:51:41.092356Z",
     "iopub.status.idle": "2024-04-16T20:51:41.105248Z",
     "shell.execute_reply": "2024-04-16T20:51:41.104340Z"
    },
    "papermill": {
     "duration": 0.04066,
     "end_time": "2024-04-16T20:51:41.107284",
     "exception": false,
     "start_time": "2024-04-16T20:51:41.066624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Algorithm</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>GBDT</td>\n",
       "      <td>0.808974</td>\n",
       "      <td>0.913760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DT</td>\n",
       "      <td>0.761929</td>\n",
       "      <td>0.902954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>xgb</td>\n",
       "      <td>0.853675</td>\n",
       "      <td>0.882072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LR</td>\n",
       "      <td>0.869915</td>\n",
       "      <td>0.876391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>SVC</td>\n",
       "      <td>0.868073</td>\n",
       "      <td>0.868662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AdaBoost</td>\n",
       "      <td>0.850494</td>\n",
       "      <td>0.846106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RF</td>\n",
       "      <td>0.865227</td>\n",
       "      <td>0.839612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NB</td>\n",
       "      <td>0.845806</td>\n",
       "      <td>0.834371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ETC</td>\n",
       "      <td>0.865227</td>\n",
       "      <td>0.829823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KN</td>\n",
       "      <td>0.737988</td>\n",
       "      <td>0.801966</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Algorithm  Accuracy  Precision\n",
       "7      GBDT  0.808974   0.913760\n",
       "2        DT  0.761929   0.902954\n",
       "8       xgb  0.853675   0.882072\n",
       "3        LR  0.869915   0.876391\n",
       "9       SVC  0.868073   0.868662\n",
       "5  AdaBoost  0.850494   0.846106\n",
       "4        RF  0.865227   0.839612\n",
       "1        NB  0.845806   0.834371\n",
       "6       ETC  0.865227   0.829823\n",
       "0        KN  0.737988   0.801966"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "performance_df = pd.DataFrame({'Algorithm':clfs.keys(),'Accuracy':accuracy_scores,'Precision':precision_scores}).sort_values('Precision',ascending=False)\n",
    "performance_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "384c9c3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:51:41.158544Z",
     "iopub.status.busy": "2024-04-16T20:51:41.158220Z",
     "iopub.status.idle": "2024-04-16T20:51:41.173177Z",
     "shell.execute_reply": "2024-04-16T20:51:41.172329Z"
    },
    "papermill": {
     "duration": 0.042615,
     "end_time": "2024-04-16T20:51:41.175229",
     "exception": false,
     "start_time": "2024-04-16T20:51:41.132614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Algorithm</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GBDT</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.808974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DT</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.761929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>xgb</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.853675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LR</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.869915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SVC</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.868073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AdaBoost</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.850494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>RF</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.865227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NB</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.845806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ETC</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.865227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>KN</td>\n",
       "      <td>Accuracy</td>\n",
       "      <td>0.737988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>GBDT</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.913760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>DT</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.902954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>xgb</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.882072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>LR</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.876391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>SVC</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.868662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>AdaBoost</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.846106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>RF</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.839612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>NB</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.834371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>ETC</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.829823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>KN</td>\n",
       "      <td>Precision</td>\n",
       "      <td>0.801966</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Algorithm   variable     value\n",
       "0       GBDT   Accuracy  0.808974\n",
       "1         DT   Accuracy  0.761929\n",
       "2        xgb   Accuracy  0.853675\n",
       "3         LR   Accuracy  0.869915\n",
       "4        SVC   Accuracy  0.868073\n",
       "5   AdaBoost   Accuracy  0.850494\n",
       "6         RF   Accuracy  0.865227\n",
       "7         NB   Accuracy  0.845806\n",
       "8        ETC   Accuracy  0.865227\n",
       "9         KN   Accuracy  0.737988\n",
       "10      GBDT  Precision  0.913760\n",
       "11        DT  Precision  0.902954\n",
       "12       xgb  Precision  0.882072\n",
       "13        LR  Precision  0.876391\n",
       "14       SVC  Precision  0.868662\n",
       "15  AdaBoost  Precision  0.846106\n",
       "16        RF  Precision  0.839612\n",
       "17        NB  Precision  0.834371\n",
       "18       ETC  Precision  0.829823\n",
       "19        KN  Precision  0.801966"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "performance_df1 = pd.melt(performance_df, id_vars = \"Algorithm\")\n",
    "performance_df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c885441d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:51:41.227478Z",
     "iopub.status.busy": "2024-04-16T20:51:41.226628Z",
     "iopub.status.idle": "2024-04-16T20:51:41.640970Z",
     "shell.execute_reply": "2024-04-16T20:51:41.640086Z"
    },
    "papermill": {
     "duration": 0.44211,
     "end_time": "2024-04-16T20:51:41.643093",
     "exception": false,
     "start_time": "2024-04-16T20:51:41.200983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlQAAAIjCAYAAADFv4VQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABHM0lEQVR4nO3de3yP9f/H8ednmx2YDWFzGKtoUQxzCBWyvqSvQwfW0VnxNarlEJVDyoosFZFsTt+IkNRELIewnCe+MWdTzCHabLGxXb8//HzqY4fMte3aeNxvt8/tts/7el/X9frMYc+9r/f1vmyGYRgCAADADXOyugAAAIDijkAFAABgEoEKAADAJAIVAACASQQqAAAAkwhUAAAAJhGoAAAATCJQAQAAmESgAgAAMIlABQAAYJKlgWrdunVq3769KleuLJvNpiVLlvzjPmvWrFGDBg3k5uamGjVqaObMmQVeJwAAQG4sDVSpqakKDAzU5MmTr6v/4cOH9eijj6pVq1aKi4vTyy+/rN69e2vFihUFXCkAAEDObEXl4cg2m01fffWVOnXqlGOfoUOHKjo6Wrt377a3PfXUU/rjjz+0fPnyQqgSAAAgq2I1hyo2NlbBwcEObW3atFFsbGyO+6SlpSk5Odn+SkpK0unTp1VEciQAALgJFKtAlZiYKB8fH4c2Hx8fJScn68KFC9nuEx4eLm9vb/urTJkyqlixos6fP18YJQMAgFtAsQpUN2LYsGFKSkqyv44dO2Z1SQAA4CbjYnUBeeHr66uTJ086tJ08eVJeXl7y8PDIdh83Nze5ubkVRnkAAOAWVaxGqJo2baqYmBiHtpUrV6pp06YWVQQAAGBxoEpJSVFcXJzi4uIkXVkWIS4uTgkJCZKuXK7r2rWrvX/fvn116NAhDRkyRHv37tUnn3yiBQsW6JVXXrGifAAAAEkWB6qtW7eqfv36ql+/viQpLCxM9evX14gRIyRJJ06csIcrSbr99tsVHR2tlStXKjAwUBMmTND06dPVpk0bS+oHAACQitA6VIUlOTlZ3t7eSkpKkpeXl9XlAACAm0CxmkMFAABQFBGoAAAATCJQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAEwiUAEAAJhEoAIAADCJQAUAAGASgQoAAMAkAhUAAIBJBCoAAACTCFQAAAAmEagAAABMIlABAACYRKACAAAwiUAFAABgEoEKAADAJAIVAACASQQqAAAAkwhUAAAAJhGoAAAATCJQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAEwiUAEAAJhEoAIAADCJQAUAAGASgQoAAMAkAhUAAIBJBCoAAACTCFQAAAAmEagAAABMIlABAACYRKACAAAwiUAFAABgEoEKAADAJAIVAACASQQqAAAAkwhUAAAAJhGoAAAATCJQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAEwiUAEAAJhEoAIAADCJQAUAAGASgQoAAMAkAhUAAIBJBCoAAACTCFQAAAAmEagAAABMIlABAACY5GJ1ATeLhLfqmNq/2ohd+VQJAAAobIxQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMsD1STJ0+Wv7+/3N3d1aRJE23evDnHvpcuXdJbb72lO++8U+7u7goMDNTy5csLsVoAAICsLA1U8+fPV1hYmEaOHKnt27crMDBQbdq00alTp7Lt/8Ybb+jTTz/Vxx9/rF9++UV9+/bVY489ph07dhRy5QAAAH+xGYZhWHXyJk2aqFGjRpo0aZIkKTMzU35+fhowYIBee+21LP0rV66s119/Xf3797e3PfHEE/Lw8NB///vf6zpncnKyvL29lZSUJC8vr/z5ICoeC3uarVFiAVIAALJj2QhVenq6tm3bpuDg4L+KcXJScHCwYmNjs90nLS1N7u7uDm0eHh5av359judJS0tTcnKywwsAACA/WRaozpw5o4yMDPn4+Di0+/j4KDExMdt92rRpo4iICO3fv1+ZmZlauXKlFi9erBMnTuR4nvDwcHl7e9tffn5++fo5AAAALJ+Unhcffvihatasqbvvvluurq4KDQ1Vjx495OSU88cYNmyYkpKS7K9jx44VYsUAAOBWYFmgKl++vJydnXXy5EmH9pMnT8rX1zfbfSpUqKAlS5YoNTVVR48e1d69e+Xp6ak77rgjx/O4ubnJy8vL4QUAAJCfLAtUrq6uCgoKUkxMjL0tMzNTMTExatq0aa77uru7q0qVKrp8+bIWLVqkjh07FnS5AAAAOXKx8uRhYWHq1q2bGjZsqMaNG2vixIlKTU1Vjx49JEldu3ZVlSpVFB4eLknatGmTfvvtN9WrV0+//fabRo0apczMTA0ZMsTKjwEAAG5xlgaqkJAQnT59WiNGjFBiYqLq1aun5cuX2yeqJyQkOMyPunjxot544w0dOnRInp6eateunebMmaMyZcpY9AkAAAAsXofKCqxDZQ7rUAEAkFWxussPAACgKCJQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAEyy9NEzwLVYzR0AUBwxQgUAAGASgQoAAMAkAhUAAIBJzKECboDZuV7M8wKAmwsjVAAAACYRqAAAAEwiUAEAAJhEoAIAADCJQAUAAGASd/nhlhM0eLbpY3xVOh8KAQDcNAhUwE2KpR0AoPAQqIAiiFE0AChemEMFAABgEiNUAG5qZkf7to3vmk+VFG/5MWrK9xI3M0aoAAAATCJQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAExipXTkK7OrKfP8OQBAccQIFQAAgEkEKgAAAJO45AfghvHgYQC4ghEqAAAAkwhUAAAAJnHJD4BlEt6qY/oY1UbsyodKAMAcAhUAWMzsXDSJ+WiA1bjkBwAAYBKBCgAAwCQCFQAAgEkEKgAAAJOYlA4AueBORADXgxEqAAAAkwhUAAAAJhGoAAAATGIOFQDcBMzO9WKeF2AOI1QAAAAmEagAAABMIlABAACYxBwqAEChYJ4XbmaMUAEAAJhEoAIAADCJQAUAAGASgQoAAMAkAhUAAIBJBCoAAACTCFQAAAAmEagAAABMIlABAACYRKACAAAwiUAFAABgEoEKAADAJAIVAACASQQqAAAAkwhUAAAAJhGoAAAATCJQAQAAmORidQFFQdDg2aaP8VXpfCgEAAAUS4xQAQAAmESgAgAAMIlABQAAYJLlgWry5Mny9/eXu7u7mjRpos2bN+faf+LEiQoICJCHh4f8/Pz0yiuv6OLFi4VULQAAQFaWBqr58+crLCxMI0eO1Pbt2xUYGKg2bdro1KlT2fafO3euXnvtNY0cOVJ79uxRZGSk5s+fr+HDhxdy5QAAAH+x9C6/iIgI9enTRz169JAkTZ06VdHR0YqKitJrr72Wpf/GjRvVvHlzPfPMM5Ikf39/Pf3009q0aVOh1g0AuDklvFXH9DGqjdiVD5WguLFshCo9PV3btm1TcHDwX8U4OSk4OFixsbHZ7tOsWTNt27bNflnw0KFDWrZsmdq1a5fjedLS0pScnOzwAgAAyE+WjVCdOXNGGRkZ8vHxcWj38fHR3r17s93nmWee0ZkzZ3T//ffLMAxdvnxZffv2zfWSX3h4uEaPHp2vtQMAAPyd5ZPS82LNmjUaO3asPvnkE23fvl2LFy9WdHS0xowZk+M+w4YNU1JSkv117NixQqwYAADcCiwboSpfvrycnZ118uRJh/aTJ0/K19c3233efPNNPf/88+rdu7ckqU6dOkpNTdULL7yg119/XU5OWfOhm5ub3Nzc8v8DAAAA/D/LRqhcXV0VFBSkmJgYe1tmZqZiYmLUtGnTbPf5888/s4QmZ2dnSZJhGAVXLAAAQC4svcsvLCxM3bp1U8OGDdW4cWNNnDhRqamp9rv+unbtqipVqig8PFyS1L59e0VERKh+/fpq0qSJDhw4oDfffFPt27e3BysAAIDCZmmgCgkJ0enTpzVixAglJiaqXr16Wr58uX2iekJCgsOI1BtvvCGbzaY33nhDv/32mypUqKD27dvrnXfeseojAAAAWBuoJCk0NFShoaHZbluzZo3DexcXF40cOVIjR44shMoAAACuT7G6yw8AAKAoIlABAACYRKACAAAwiUAFAABgEoEKAADAJAIVAACASQQqAAAAkwhUAAAAJhGoAAAATCJQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAEwiUAEAAJhEoAIAADDphgPVgQMHtGLFCl24cEGSZBhGvhUFAABQnOQ5UP3+++8KDg7WXXfdpXbt2unEiROSpF69eunVV1/N9wIBAACKujwHqldeeUUuLi5KSEhQyZIl7e0hISFavnx5vhYHAABQHLjkdYfvv/9eK1asUNWqVR3aa9asqaNHj+ZbYQAAAMVFnkeoUlNTHUamrjp79qzc3NzypSgAAIDiJM+B6oEHHtDs2bPt7202mzIzMzVu3Di1atUqX4sDAAAoDvJ8yW/cuHFq3bq1tm7dqvT0dA0ZMkT/+9//dPbsWW3YsKEgasT/Cxo8+5875eKr0vlUCAAAcJDnEap7771X+/bt0/3336+OHTsqNTVVjz/+uHbs2KE777yzIGoEAAAo0vI8QiVJ3t7eev311/O7FgAAgGIpz4Fq3bp1uW5/8MEHb7gYAACA4ijPgaply5ZZ2mw2m/3rjIwMUwUBAAAUN3meQ3Xu3DmH16lTp7R8+XI1atRI33//fUHUCAAAUKTleYTK29s7S9vDDz8sV1dXhYWFadu2bflSGAAAQHFxww9HvpaPj4/i4+Pz63AAAADFRp5HqH7++WeH94Zh6MSJE3r33XdVr169/KoLAACg2MhzoKpXr55sNpsMw3Bov++++xQVFZVvhQEAABQXeQ5Uhw8fdnjv5OSkChUqyN3dPd+KAgAAKE7yHKiqV69eEHUAAAAUW9cVqD766KPrPuDAgQNvuBgAAIDi6LoC1QcffHBdB7PZbAQqAABwy7muQHXtvCkAAAD8Jd/WoQIAALhV5XlSuiT9+uuvWrp0qRISEpSenu6wLSIiIl8KAwAAKC7yHKhiYmLUoUMH3XHHHdq7d6/uvfdeHTlyRIZhqEGDBgVRIwAAQJGW50t+w4YN06BBg7Rr1y65u7tr0aJFOnbsmFq0aKHOnTsXRI0AAABFWp4D1Z49e9S1a1dJkouLiy5cuCBPT0+99dZbeu+99/K9QAAAgKIuz4GqVKlS9nlTlSpV0sGDB+3bzpw5k3+VAQAAFBN5nkN13333af369apVq5batWunV199Vbt27dLixYt13333FUSNAABcl6DBs03t/1XpfCoEt5w8B6qIiAilpKRIkkaPHq2UlBTNnz9fNWvW5A4/AABwS8pzoBo7dqyee+45SVcu/02dOjXfiwIAAChO8jyH6vTp02rbtq38/Pw0ePBg7dy5syDqAgAAKDbyHKi+/vprnThxQm+++aa2bNmiBg0a6J577tHYsWN15MiRAigRAACgaLuhR8+ULVtWL7zwgtasWaOjR4+qe/fumjNnjmrUqJHf9QEAABR5pp7ld+nSJW3dulWbNm3SkSNH5OPjk191AQAAFBs3FKhWr16tPn36yMfHR927d5eXl5e+/fZb/frrr/ldHwAAKGKOHDkim82muLi4696ne/fu6tSpU659WrZsqZdfftlUbVbJ811+VapU0dmzZ9W2bVtNmzZN7du3l5ubW0HUBgAAiiA/Pz+dOHFC5cuXt7qUIiPPgWrUqFHq3LmzypQpUwDlAACAoiw9PV2urq7y9fW1upQiJc+X/Pr06UOYAgCgGJg2bZoqV66szMxMh/aOHTuqZ8+eOnjwoDp27CgfHx95enqqUaNGWrVqlUNff39/jRkzRl27dpWXl5deeOGFLJf8MjIy1KtXL91+++3y8PBQQECAPvzww2xrGj16tCpUqCAvLy/17dvX/ji77KSlpWnQoEGqUqWKSpUqpSZNmmjNmjWmvicFxdSkdAAAUHR17txZv//+u1avXm1vO3v2rJYvX65nn31WKSkpateunWJiYrRjxw61bdtW7du3V0JCgsNx3n//fQUGBmrHjh168803s5wnMzNTVatW1ZdffqlffvlFI0aM0PDhw7VgwQKHfjExMdqzZ4/WrFmjefPmafHixRo9enSO9YeGhio2NlZffPGFfv75Z3Xu3Flt27bV/v37TX5n8l+eL/kBAIDioWzZsnrkkUc0d+5ctW7dWpK0cOFClS9fXq1atZKTk5MCAwPt/ceMGaOvvvpKS5cuVWhoqL39oYce0quvvmp/f+26kyVKlHAIRrfffrtiY2O1YMECdenSxd7u6uqqqKgolSxZUvfcc4/eeustDR48WGPGjJGTk+MYT0JCgmbMmKGEhARVrlxZkjRo0CAtX75cM2bM0NixY81/g/IRI1QAANzEnn32WS1atEhpaWmSpM8//1xPPfWUnJyclJKSokGDBqlWrVoqU6aMPD09tWfPniwjVA0bNvzH80yePFlBQUGqUKGCPD09NW3atCzHCQwMVMmSJe3vmzZtqpSUFB07dizL8Xbt2qWMjAzddddd8vT0tL/Wrl2rgwcP3si3okAxQgUAwE2sffv2MgxD0dHRatSokX788Ud98MEHkq6M+KxcuVLvv/++atSoIQ8PDz355JNZ5jWVKlUq13N88cUXGjRokCZMmKCmTZuqdOnSGj9+vDZt2nTDdaekpMjZ2Vnbtm2Ts7OzwzZPT88bPm5BIVABAHATc3d31+OPP67PP/9cBw4cUEBAgBo0aCBJ2rBhg7p3767HHntM0pUQcyOPkduwYYOaNWum//znP/a27EaRdu7cqQsXLsjDw0OS9NNPP8nT01N+fn5Z+tavX18ZGRk6deqUHnjggTzXVNi45AcAwE3u2WefVXR0tKKiovTss8/a22vWrKnFixcrLi5OO3fu1DPPPJPljsDrUbNmTW3dulUrVqzQvn377M/7vVZ6erp69eqlX375RcuWLdPIkSMVGhqaZf6UJN1111169tln1bVrVy1evFiHDx/W5s2bFR4erujo6DzXWNAIVAAA3OQeeughlStXTvHx8XrmmWfs7RERESpbtqyaNWum9u3bq02bNvbRq7x48cUX9fjjjyskJERNmjTR77//7jBadVXr1q1Vs2ZNPfjggwoJCVGHDh00atSoHI87Y8YMde3aVa+++qoCAgLUqVMnbdmyRdWqVctzjQWNS34AANzknJycdPz48Szt/v7++uGHHxza+vfv7/A+u0uA/v7+MgzD/t7NzU0zZszQjBkzHPqFh4fbv545c6b965yWSrh2jamrdw/mtrRCUcEIFQAAgEkEKgAAAJMIVAAAACYRqAAAAEwiUAEAAJhEoAIAADCJQAUAAGASgQoAAMAkAhUAAIBJRSJQTZ48Wf7+/nJ3d1eTJk20efPmHPu2bNlSNpsty+vRRx8txIoBAAD+YvmjZ+bPn6+wsDBNnTpVTZo00cSJE9WmTRvFx8erYsWKWfovXrxY6enp9ve///67AgMD1blz58IsGwCAfBE0eHahnWvb+K43vG9sbKzuv/9+tW3btkg+nNhqlo9QRUREqE+fPurRo4dq166tqVOnqmTJkoqKisq2f7ly5eTr62t/rVy5UiVLliRQAQBQgCIjIzVgwACtW7cu2+cCFpa/D6oUJZYGqvT0dG3btk3BwcH2NicnJwUHBys2Nva6jhEZGamnnnpKpUqVynZ7WlqakpOTHV4AAOD6paSkaP78+erXr58effRRhwcdS9I333yjRo0ayd3dXeXLl9djjz1m35aWlqahQ4fKz89Pbm5uqlGjhiIjIyVdeWBymTJlHI61ZMkS2Ww2+/tRo0apXr16mj59um6//Xa5u7tLkpYvX677779fZcqU0W233aZ///vfOnjwoMOxfv31Vz399NMqV66cSpUqpYYNG2rTpk06cuSInJyctHXrVof+EydOVPXq1ZWZmZnn75GlgerMmTPKyMiQj4+PQ7uPj48SExP/cf/Nmzdr9+7d6t27d459wsPD5e3tbX/5+fmZrhsAgFvJggULdPfddysgIEDPPfecoqKiZBiGJCk6OlqPPfaY2rVrpx07digmJkaNGze279u1a1fNmzdPH330kfbs2aNPP/1Unp6eeTr/gQMHtGjRIi1evFhxcXGSpNTUVIWFhWnr1q2KiYmRk5OTHnvsMXsYSklJUYsWLfTbb79p6dKl2rlzp4YMGaLMzEz5+/srODhYM2bMcDjPjBkz1L17dzk55T0eWT6HyozIyEjVqVPH4Q/uWsOGDVNYWJj9fXJyMqEKAIA8iIyM1HPPPSdJatu2rZKSkrR27Vq1bNlS77zzjp566imNHj3a3j8wMFCStG/fPi1YsEArV660X42644478nz+9PR0zZ49WxUqVLC3PfHEEw59oqKiVKFCBf3yyy+69957NXfuXJ0+fVpbtmxRuXLlJEk1atSw9+/du7f69u2riIgIubm5afv27dq1a5e+/vrrPNcnWTxCVb58eTk7O+vkyZMO7SdPnpSvr2+u+6ampuqLL75Qr169cu3n5uYmLy8vhxcAALg+8fHx2rx5s55++mlJkouLi0JCQuyX7eLi4tS6dets942Li5Ozs7NatGhhqobq1as7hClJ2r9/v55++mndcccd8vLykr+/vyQpISHBfu769evbw9S1OnXqJGdnZ3311VeSrlx+bNWqlf04eWVpoHJ1dVVQUJBiYmLsbZmZmYqJiVHTpk1z3ffLL79UWlqaPTEDAID8FxkZqcuXL6ty5cpycXGRi4uLpkyZokWLFikpKUkeHh457pvbNunKvOmrlw6vunTpUpZ+2c2Tbt++vc6ePavPPvtMmzZt0qZNmyT9NWn9n87t6uqqrl27asaMGUpPT9fcuXPVs2fPXPfJjeV3+YWFhemzzz7TrFmztGfPHvXr10+pqanq0aOHpCvXXocNG5Zlv8jISHXq1Em33XZbYZcMAMAt4fLly5o9e7YmTJiguLg4+2vnzp2qXLmy5s2bp7p16zoMjPxdnTp1lJmZqbVr12a7vUKFCjp//rxSU1PtbVfnSOXm999/V3x8vN544w21bt1atWrV0rlz5xz61K1bV3FxcTp79myOx+ndu7dWrVqlTz75RJcvX9bjjz/+j+fOieVzqEJCQnT69GmNGDFCiYmJqlevnpYvX26fqJ6QkJBlclh8fLzWr1+v77//3oqSAQC4JXz77bc6d+6cevXqJW9vb4dtTzzxhCIjIzV+/Hi1bt1ad955p5566ildvnxZy5Yt09ChQ+Xv769u3bqpZ8+e+uijjxQYGKijR4/q1KlT6tKli5o0aaKSJUtq+PDhGjhwoDZt2pTlDsLslC1bVrfddpumTZumSpUqKSEhQa+99ppDn6efflpjx45Vp06dFB4erkqVKmnHjh2qXLmy/SpYrVq1dN9992no0KHq2bPnP45q5cbyQCVJoaGhCg0NzXbbmjVrsrQFBARkGSIEAKA4MrPYZkGLjIxUcHBwljAlXQlU48aNU7ly5fTll19qzJgxevfdd+Xl5aUHH3zQ3m/KlCkaPny4/vOf/+j3339XtWrVNHz4cElX1pb873//q8GDB+uzzz5T69atNWrUKL3wwgu51uXk5KQvvvhCAwcO1L333quAgAB99NFHatmypb2Pq6urvv/+e7366qtq166dLl++rNq1a2vy5MkOx+rVq5c2btxo6nKfVEQCFQAAKHq++eabHLc1btzYPrhRt27dHC+Xubu7KyIiQhEREdlu79Spkzp16uTQ1qdPH/vXo0aN0qhRo7LsFxwcrF9++cWh7drBlurVq2vhwoU5fgZJ+u2331SnTh01atQo137/xPI5VAAAAIUtJSVFu3fv1qRJkzRgwADTxyNQAQCAW05oaKiCgoLUsmVL05f7JC75AQCAW9DMmTOvawL89WKECgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAEwiUAEAAJjEsgkAAFgo4a06hXauaiN2Fdq5zLDZbPrqq6+yrKButm9BYoQKAADkqHv37rLZbLLZbHJ1dVWNGjX01ltv6fLlywV2zhMnTuiRRx7J974FiREqAACQq7Zt22rGjBlKS0vTsmXL1L9/f5UoUULDhg1z6Jeeni5XV1fT5/P19S2QvgWJESoAAJArNzc3+fr6qnr16urXr5+Cg4O1dOlSde/eXZ06ddI777yjypUrKyAgQJJ07NgxdenSRWXKlFG5cuXUsWNHHTlyxOGYUVFRuueee+Tm5qZKlSopNDTUvs1ms2nJkiWSroS00NBQVapUSe7u7qpevbrCw8Oz7StJu3bt0kMPPSQPDw/ddttteuGFF5SSkmLffrXm999/X5UqVdJtt92m/v3769KlS6a+RwQqAACQJx4eHkpPT5ckxcTEKD4+XitXrtS3336rS5cuqU2bNipdurR+/PFHbdiwQZ6enmrbtq19nylTpqh///564YUXtGvXLi1dulQ1atTI9lwfffSRli5dqgULFig+Pl6ff/65/P39s+2bmpqqNm3aqGzZstqyZYu+/PJLrVq1yiGsSdLq1at18OBBrV69WrNmzcqXx9BwyQ8AAFwXwzAUExOjFStWaMCAATp9+rRKlSql6dOn2y/1/fe//1VmZqamT58um80mSZoxY4bKlCmjNWvW6F//+pfefvttvfrqq3rppZfsx27UqFG250xISFDNmjV1//33y2azqXr16jnWN3fuXF28eFGzZ89WqVKlJEmTJk1S+/bt9d5778nHx0eSVLZsWU2aNEnOzs66++679eijjyomJkZ9+vS54e8NI1QAACBX3377rTw9PeXu7q5HHnlEISEhGjVqlCSpTp06DvOmdu7cqQMHDqh06dLy9PSUp6enypUrp4sXL+rgwYM6deqUjh8/rtatW1/Xubt37664uDgFBARo4MCB+v7773Psu2fPHgUGBtrDlCQ1b95cmZmZio+Pt7fdc889cnZ2tr+vVKmSTp06db3fjmwxQgUAAHLVqlUrTZkyRa6urqpcubJcXP6KD38PL5KUkpKioKAgff7551mOU6FCBTk55W0sp0GDBjp8+LC+++47rVq1Sl26dFFwcLAWLlx4Yx9GUokSJRze22w2ZWZm3vDxJAIVAAD4B6VKlcpxjtO1GjRooPnz56tixYry8vLKto+/v79iYmLUqlWr6zqml5eXQkJCFBISoieffFJt27bV2bNnVa5cOYd+tWrV0syZM5WammoPehs2bJCTk5N9wnxB4ZIfAADIN88++6zKly+vjh076scff9Thw4e1Zs0aDRw4UL/++qskadSoUZowYYI++ugj7d+/X9u3b9fHH3+c7fEiIiI0b9487d27V/v27dOXX34pX19flSlTJttzu7u7q1u3btq9e7dWr16tAQMG6Pnnn7fPnyoojFABAGCh4rJ6+fUqWbKk1q1bp6FDh+rxxx/X+fPnVaVKFbVu3do+YtWtWzddvHhRH3zwgQYNGqTy5cvrySefzPZ4pUuX1rhx47R//345OzurUaNGWrZsWbaXDkuWLKkVK1bopZdeUqNGjVSyZEk98cQTioiIKNDPLBGoAABALnJbTiCnbb6+vpo1a1aux33xxRf14osvZrvNMAz713369Mn17ru/95WuTJL/4YcfcuyfXc0TJ07MtdbrwSU/AAAAkwhUAAAAJhGoAAAATCJQAQAAmESgAgAAMIlABQAAYBKBCgAAwCQCFQAAgEkEKgAAAJMIVAAAACYRqAAAAEwiUAEAAJhEoAIAADCJQAUAAGASgQoAAMAkAhUAAIBJBCoAAACTCFQAAAAmEagAAABMIlAB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91xoaKieeuopVa1aVf369bPfMJGRkaFPPvlEH3zwQZG483TcuHF677335Ovrq3nz5mV7CRC4XjajKE4SKMJuv/12bd26VbfddpvVpeTKyclJiYmJRXKEqjjx9/f/x3Bqs9nsd/9Z5dKlS/YfUvv375dhGLrrrrv0zDPP6OWXXy4S89E8PT21e/du+fv7a9SoUdq9e7cWLlyo7du3q127dkpMTLS6xOvy559/2kctreDk5OTwd/JqqLr2vdXzOF9//XWFh4erdOnSuuOOOyRduVyZkpKiwYMHWzrH6yonJyd5eHgoODg427tkr7J6rimKB0ao8ujw4cP2r8+cOaMjR47IZrPJ39+/SIWs1atXq1y5coqKitLixYvtdd5+++168skn9fzzzxfpUayi4siRI7lu//XXXy2ftJqRkaESJUpoyJAhReLSXk5cXV3tk+NXrVqlrl27SpLKlStXJEZV/klaWpomT56scePGWRr+Vq9ebdm5r9e6des0atQodezYUZ9//rkOHDggwzDUokULPfPMMw5zvqx07WhkdorDQs4oGhihugH/+9//1K9fP/saMFe1aNFCU6ZMUUBAgEWV/cUwDLVv317Lli1TYGCg7r77bhmGoT179mjXrl3q0KGDlixZYnWZql+/frbBzmazyd3dXTVq1FD37t3VqlUrC6r7Zzt37lSDBg0sHQ3w9fVV9+7d1atXL0snn/+TDh06KD09Xc2bN9eYMWN0+PBhValSRd9//71CQ0O1b98+q0tUWlqaRo0apZUrV8rV1VVDhgxRp06dFBUVpTfeeEPOzs4KDQ3V0KFDrS61SHN2dtaJEyeK/Aj5Bx98kOvl8PPnz6tt27ZZ/q8HslO0brMoBhITE9WiRQudPn1aERERWrZsmaKjozV+/HidOHFCDzzwgE6dOmV1mZo5c6bWrVunmJgY7dixQ/PmzdMXX3yhnTt3atWqVfrhhx+KxOrUbdu21aFDh1SqVCm1atVKrVq1kqenpw4ePKhGjRrpxIkTCg4O1tdff211qUVW//79tXDhQt1999164IEHNHPmTEuXScjJpEmT5OLiooULF2rKlCmqUqWKJOm7775T27ZtLa7uihEjRmjKlCny9/fXkSNH1LlzZ73wwguaOHGiIiIidOTIEcvDVHFYjLK4/J4+fPjwHP8fTE1N1SOPPKLff/+9kKtCccUIVR4NHTpUq1at0oYNG+Tu7u6w7cKFC7r//vv1r3/9S+Hh4RZVeMW//vUvPfTQQ3rttdey3T527FitXbtWK1asKOTKHPXp00fVqlXTm2++6dD+9ttv6+jRo/rss880cuRIRUdHa+vWrRZVmbOiMEJ11Zo1azRjxgwtWrRIzs7O6tKli3r37q0mTZpYXVqxcccdd2jixInq0KGDdu/erbp166p79+6KjIwsMpfIc/vlIjY2Vh999JEyMzN18eLFQqzKkZOTk06ePKkKFSpYVsP1WLhwoZ5//nnNnz/f4c7NlJQUtW3bVqdOndKaNWuK7DppKFoIVHnUoEEDvfbaa+rSpUu227/44guNGzdO27dvL+TKHPn6+mr58uWqV69ettt37NihRx55xPKJwN7e3tq2bZtq1Kjh0H7gwAEFBQUpKSlJe/fuVaNGjYrkXIaiFKiuSklJ0RdffKGZM2dq48aNqlWrlnr16qWwsDCrS1NGRoaWLFmiPXv2SJLuuecedejQIdcJwYXJ1dXVfilSkjw8PLR582bVqVPH4spyl91ilNWrV7esHicnJz3yyCNFfmFh6cpdvC+99JKio6PVsmVLpaamqm3btkpMTNTatWsJU7huTErPo0OHDqlBgwY5bm/YsKHld3xJ0tmzZ+Xj45Pjdh8fH507d64QK8qeu7u7Nm7cmCVQbdy40T4CmJmZmWU0sLBcu2bWtf7+3LeiwtPTU71791bv3r0VHR2trl27avDgwZYHqgMHDqhdu3b67bff7PMMw8PD5efnp+joaN15552W1iddCXx/vyPSxcXFvmRGUVSUF6MsDgsLS1Lv3r119uxZdezYUV9//bVGjBih48ePE6aQZwSqPDp//ny2D/y8qnTp0kpJSSnEirKXkZGR6zwKZ2dnyxf/k648HLlv377atm2bGjVqJEnasmWLpk+fruHDh0u6stBiTiNtBe3aNbOy2371brWi4s8//9SCBQs0Y8YMrV+/XnfeeacGDx5sdVkaOHCg7rzzTv3000/2Jw38/vvveu655zRw4EBFR0dbXOGVuT9/f2TTxYsX1bdvX5UqVcqhn9UjK8VhMcqiurBwdoYMGaKzZ8+qdevW8vf315o1a4rU0xBQPHDJL4+cnZ21b9++HOcGnDx5Unfffbfll4D+acg9LS1Ny5cvt7xOSfr88881adIkxcfHS5ICAgI0YMAAPfPMM5KuzE27etcfcrZx40ZFRUXpyy+/1OXLl/Xkk0+qV69eevDBB60uTZJUqlQp/fTTT1kun+3cuVPNmzcvEr+I9OjR47r6WbkI6d8Xoxw7dmyRXIyyuKyDd+0I9NW7oq9e8r3K6gCN4oFAlUfXLqp3raKyqF5x+MEgXVlTJ6clET799NMsq1Qjq3HjxmnGjBnat2+fGjZsqF69eunpp59W6dKlrS7NQbly5fTtt9+qWbNmDu0bNmxQ+/btdfbsWYsqK16Kw2KUxSVQFZf/J1E8EKjyaO3atdfV7+oDYZE7Nzc3DRw4UGPHjlWJEiUkXVkwtUePHlq/fn2RmOdV1FWoUEHPP/+8evbsWWTmz2Sna9eu2r59uyIjI+0LO27atEl9+vRRUFCQZs6caW2BxUT37t2v645DK0OAh4eHEhIS7CP57777rvr27asyZcpIunKp94EHHtAvv/xiWY1AfiNQwVIbN25U165d5enpqblz5+rw4cPq1auX7rrrLs2ZM8fSO5WKi3Xr1ik5OVn//ve/7W2zZ8/WyJEjlZqaqk6dOunjjz/+xzuuCtoff/yhbt266ZtvvrGH58uXL6tDhw6aOXPmP85XQ/Fx7QiVl5eX4uLi7I+gOXnypCpXrmz5SD6Qn5iUng8Mw9Dq1at14cIFNWvWTGXLlrW6pGKjWbNmiouLU9++fdWgQQNlZmZqzJgxGjJkSJFZ96eoCw8PV8uWLe2BateuXerVq5e6d++uWrVqafz48apcubJGjRplaZ1lypTR119/rf3792vPnj2y2WyqVatWljs8cfPh93bcCghUefTHH3/opZde0vbt23XfffdpwoQJateunTZu3ChJqlixor7//nvVrVvX4kqLj3379mnr1q2qWrWqjh8/rvj4eP35559Z7qxC9uLi4jRmzBj7+y+++EJNmjTRZ599Jkny8/PTyJEjLQ9UV9WsWdMeogjNAG4WPHomjwYNGqTY2Fg99dRT2rVrl9q2bauMjAzFxsZq06ZNqlWrll5//XWryyw23n33XTVt2lQPP/ywdu/erc2bN2vHjh2qW7euYmNjrS6vWDh37pzDmmNr167VI488Yn/fqFEjHTt2zIrSspg9e7bq1KkjDw8PeXh4qG7dupozZ47VZSGf2Wy2LGGZ8IybHSNUefTdd99p7ty5atGihbp37y4/Pz/98MMP9sd7vPfeew6PMEDuPvzwQy1ZssQeAO69915t3rxZw4cPV8uWLZWWlmZxhUWfj4+PDh8+LD8/P6Wnp2v79u0aPXq0ffv58+ftc5asFBERoTfffFOhoaFq3ry5JGn9+vXq27evzpw5k+tDalG8/NN6Xvy7xs2ISel55OLiomPHjqlSpUqSpJIlS2rXrl32VZ4TExNVpUoVJltepzNnzqh8+fLZblu7di13S16Hfv36aefOnXrvvfe0ZMkSzZo1S8ePH7ev+P35559r4sSJ2rJli6V13n777Ro9enSWhVBnzZqlUaNG6fDhwxZVhvzGcgS4FTFClUeZmZkOa784Ozs7DGUzrJ03OYUpiaUnrteYMWP0+OOPq0WLFvL09NSsWbMcHp8SFRWlf/3rXxZWeMWJEyeyrEElXbkx4cSJExZUhIJCUMKtiEB1A6ZPn25/vtfly5c1c+ZMezAoig/wxc2tfPnyWrdunZKSkuTp6Zllsccvv/yySDyPrkaNGlqwYIH9kUJXzZ8/XzVr1rSoKgDIH1zyyyN/f//rGoXi8gXgaNGiRQoJCVFwcLB9DtWGDRsUExOjBQsW6LHHHrO4QgC4cQQqAIVm27Zt+uCDD7Rnzx5JUq1atfTqq6+qfv36FlcGAOYQqPLo4sWLWrVqlX0RxWHDhjncseLi4qK33nqLB/kCAHALYQ5VHs2cOVPR0dH2QDVp0iTdc8898vDwkCTt3btXvr6+CgsLs7JMoEjj6QIAbjYs7JlHn3/+uV544QWHtrlz52r16tVavXq1xo8fry+//NKi6oCi5+oz/OrUqaM+ffooOTlZDzzwgIKDg9W+fXvVqlVLP//8s9VlAoApBKo8OnDggOrUqWN/7+7uLienv76NjRs35gnqwN/wdAEAtwLmUOWRh4eH4uLiFBAQkO32vXv3ql69erp48WIhVwYUTVWqVLE/XeC3336zP12gZcuWkqTNmzerQ4cOSkxMtLZQADCBEao8qlq1qnbv3p3j9p9//llVq1YtxIqAou3kyZO66667JF0JV+7u7vLz87Nvr1atmk6fPm1VeQCQLwhUedSuXTuNGDEi2xGoCxcuaPTo0Xr00UctqAwomni6AIBbAXf55dHw4cO1YMECBQQEKDQ01P6bd3x8vCZNmqTLly9nWQkauNXxdAEANzvmUN2Aw4cPq1+/flq5cqWufvtsNpsefvhhffLJJ7rjjjssrhAoOni6AIBbAYHKhLNnz+rAgQOSrjynrFy5chZXBAAArECgAgAAMIk5VAAKTWpqqtauXauEhASlp6c7bBs4cKBFVQGAeYxQASgUO3bsULt27fTnn38qNTVV5cqV05kzZ1SyZElVrFhRhw4dsrpEALhhLJsAoFC88sorat++vc6dOycPDw/99NNPOnr0qIKCgvT+++9bXR4AmMIIFYBCUaZMGW3atEkBAQEqU6aMYmNjVatWLW3atEndunXT3r17rS4RAG4YI1QACkWJEiXsz72sWLGiEhISJEne3t46duyYlaUBgGlMSgdQKOrXr68tW7aoZs2aatGihUaMGKEzZ85ozpw5uvfee60uDwBM4ZIfgEKxdetWnT9/Xq1atdKpU6fUtWtXbdy4UTVr1lRUVJQCAwOtLhEAbhiBCgAAwCTmUAEAAJjEHCoABaZ+/frX9Rw/Sdq+fXsBVwMABYdABaDAdOrUyf71xYsX9cknn6h27dpq2rSpJOmnn37S//73P/3nP/+xqEIAyB/MoQJQKHr37q1KlSppzJgxDu0jR47UsWPHFBUVZVFlAGAegQpAofD29tbWrVtVs2ZNh/b9+/erYcOGSkpKsqgyADCPSekACoWHh4c2bNiQpX3Dhg1yd3e3oCIAyD/MoQJQKF5++WX169dP27dvV+PGjSVJmzZtUmRkpEaMGGFxdQBgDpf8ABSaBQsW6MMPP9SePXskSbVr19ZLL72kWrVqsVo6gGKNQAXAEsnJyZo3b54iIyO1bds2ZWRkWF0SANww5lABKFTr1q1Tt27dVLlyZU2YMEEPPfSQfvrpJ6vLAgBTmEMFoMAlJiZq5syZioyMVHJysrp06aK0tDQtWbJEtWvXtro8ADCNESoABap9+/YKCAjQzz//rIkTJ+r48eP6+OOPrS4LAPIVI1QACtR3332ngQMHql+/flnWoAKAmwUjVAAK1Pr163X+/HkFBQWpSZMmmjRpks6cOWN1WQCQr7jLD0ChSE1N1fz58xUVFaXNmzcrIyNDERER6tmzp0qXLm11eQBgCoEKQKGLj49XZGSk5syZoz/++EMPP/ywli5danVZAHDDCFQALJORkaFvvvlGUVFRBCoAxRqBCgAAwCQmpQMAAJhEoAIAADCJQAUAAGASgQoAAMAkAhVwk1izZo1sNpv++OOPInMuf39/TZw4scDrAQCrEaiAYiY2NlbOzs569NFHLauhWbNmOnHihLy9vSVJM2fOVJkyZSyrBwCsRqACipnIyEgNGDBA69at0/Hjxwv9/JcuXZKrq6t8fX1ls9kK/fwAUBQRqIBiJCUlRfPnz1e/fv306KOPaubMmbn2/+yzz+Tn56eSJUvqscceU0RERJaRpClTpujOO++Uq6urAgICNGfOHIftNptNU6ZMUYcOHVSqVCm98847Dpf81qxZox49eigpKUk2m002m02jRo2y7//nn3/aHy9TrVo1TZs2zb7tyJEjstlsWrBggR544AF5eHioUaNG2rdvn7Zs2aKGDRvK09NTjzzyiE6fPm322wcABccAUGxERkYaDRs2NAzDML755hvjzjvvNDIzMw3DMIzVq1cbkoxz584ZhmEY69evN5ycnIzx48cb8fHxxuTJk41y5coZ3t7e9uMtXrzYKFGihDF58mQjPj7emDBhguHs7Gz88MMP9j6SjIoVKxpRUVHGwYMHjaNHjzqcKy0tzZg4caLh5eVlnDhxwjhx4oRx/vx5wzAMo3r16ka5cuWMyZMnG/v37zfCw8MNJycnY+/evYZhGMbhw4cNScbdd99tLF++3Pjll1+M++67zwgKCjJatmxprF+/3ti+fbtRo0YNo2/fvoXwHQaAG0OgAoqRZs2aGRMnTjQMwzAuXbpklC9f3li9erVhGFkDVUhIiPHoo4867P/ss886BKpmzZoZffr0cejTuXNno127dvb3koyXX37Zoc+155oxY4bDca+qXr268dxzz9nfZ2ZmGhUrVjSmTJliGMZfgWr69On2PvPmzTMkGTExMfa28PBwIyAgIJfvDABYi0t+QDERHx+vzZs36+mnn5Ykubi4KCQkRJGRkTn2b9y4sUPbte/37Nmj5s2bO7Q1b95ce/bscWhr2LDhDdddt25d+9c2m02+vr46depUjn18fHwkSXXq1HFou3YfAChKXKwuAMD1iYyM1OXLl1W5cmV7m2EYcnNz06RJkwr03KVKlbrhfUuUKOHw3mazKTMzM8c+Vye6X9t27T4AUJQwQgUUA5cvX9bs2bM1YcIExcXF2V87d+5U5cqVNW/evCz7BAQEaMuWLQ5t176vVauWNmzY4NC2YcMG1a5dO0/1ubq6KiMjI0/7AMDNhBEqoBj49ttvde7cOfXq1cu+9tNVTzzxhCIjIzV+/HiH9gEDBujBBx9URESE2rdvrx9++EHfffedw1IHgwcPVpcuXVS/fn0FBwfrm2++0eLFi7Vq1ao81efv76+UlBTFxMQoMDBQJUuWVMmSJW/8AwNAMcMIFVAMREZGKjg4OEuYkq4Eqq1bt+rnn392aG/evLmmTp2qiIgIBQYGavny5XrllVfk7u5u79OpUyd9+OGHev/993XPPffo008/1YwZM9SyZcs81desWTP17dtXISEhqlChgsaNG3dDnxMAiiubYRiG1UUAKBx9+vTR3r179eOPP1pdCgDcVLjkB9zE3n//fT388MMqVaqUvvvuO82aNUuffPKJ1WUBwE2HESrgJtalSxetWbNG58+f1x133KEBAwaob9++VpcFADcdAhUAAIBJTEoHAAAwiUAFAABgEoEKAADAJAIVAACASQQqAAAAkwhUAAAAJhGoAAAATCJQAQAAmPR//HcPO0jyhBwAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 613.5x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x = 'Algorithm', y='value', \n",
    "               hue = 'variable',data=performance_df1, kind='bar',height=5)\n",
    "plt.ylim(0.5,1.0)\n",
    "plt.xticks(rotation='vertical')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19bc2063",
   "metadata": {
    "papermill": {
     "duration": 0.024167,
     "end_time": "2024-04-16T20:51:41.692367",
     "exception": false,
     "start_time": "2024-04-16T20:51:41.668200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Three best model SVC, Logistic Regression and XGBClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2f58bd0",
   "metadata": {
    "papermill": {
     "duration": 0.024326,
     "end_time": "2024-04-16T20:51:41.740991",
     "exception": false,
     "start_time": "2024-04-16T20:51:41.716665",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Build an Voting classifier with three high performance model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "04bc4361",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T20:51:41.797576Z",
     "iopub.status.busy": "2024-04-16T20:51:41.796514Z",
     "iopub.status.idle": "2024-04-16T22:12:02.652615Z",
     "shell.execute_reply": "2024-04-16T22:12:02.651767Z"
    },
    "papermill": {
     "duration": 4820.91918,
     "end_time": "2024-04-16T22:12:02.684677",
     "exception": false,
     "start_time": "2024-04-16T20:51:41.765497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1h 22min 19s, sys: 4.48 s, total: 1h 22min 23s\n",
      "Wall time: 1h 20min 20s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingClassifier(estimators=[(&#x27;svc&#x27;,\n",
       "                              SVC(gamma=1.0, kernel=&#x27;sigmoid&#x27;,\n",
       "                                  probability=True)),\n",
       "                             (&#x27;lr&#x27;, LogisticRegression()),\n",
       "                             (&#x27;xgb&#x27;,\n",
       "                              XGBClassifier(base_score=None, booster=None,\n",
       "                                            callbacks=None,\n",
       "                                            colsample_bylevel=None,\n",
       "                                            colsample_bynode=None,\n",
       "                                            colsample_bytree=None, device=None,\n",
       "                                            early_stopping_rounds=None,\n",
       "                                            enable_categorical=False,\n",
       "                                            eval_metric=None,\n",
       "                                            feature_types=None, gamm...\n",
       "                                            importance_type=None,\n",
       "                                            interaction_constraints=None,\n",
       "                                            learning_rate=None, max_bin=None,\n",
       "                                            max_cat_threshold=None,\n",
       "                                            max_cat_to_onehot=None,\n",
       "                                            max_delta_step=None, max_depth=None,\n",
       "                                            max_leaves=None,\n",
       "                                            min_child_weight=None, missing=nan,\n",
       "                                            monotone_constraints=None,\n",
       "                                            multi_strategy=None,\n",
       "                                            n_estimators=None, n_jobs=None,\n",
       "                                            num_parallel_tree=None,\n",
       "                                            random_state=None, ...))],\n",
       "                 voting=&#x27;soft&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingClassifier</label><div class=\"sk-toggleable__content\"><pre>VotingClassifier(estimators=[(&#x27;svc&#x27;,\n",
       "                              SVC(gamma=1.0, kernel=&#x27;sigmoid&#x27;,\n",
       "                                  probability=True)),\n",
       "                             (&#x27;lr&#x27;, LogisticRegression()),\n",
       "                             (&#x27;xgb&#x27;,\n",
       "                              XGBClassifier(base_score=None, booster=None,\n",
       "                                            callbacks=None,\n",
       "                                            colsample_bylevel=None,\n",
       "                                            colsample_bynode=None,\n",
       "                                            colsample_bytree=None, device=None,\n",
       "                                            early_stopping_rounds=None,\n",
       "                                            enable_categorical=False,\n",
       "                                            eval_metric=None,\n",
       "                                            feature_types=None, gamm...\n",
       "                                            importance_type=None,\n",
       "                                            interaction_constraints=None,\n",
       "                                            learning_rate=None, max_bin=None,\n",
       "                                            max_cat_threshold=None,\n",
       "                                            max_cat_to_onehot=None,\n",
       "                                            max_delta_step=None, max_depth=None,\n",
       "                                            max_leaves=None,\n",
       "                                            min_child_weight=None, missing=nan,\n",
       "                                            monotone_constraints=None,\n",
       "                                            multi_strategy=None,\n",
       "                                            n_estimators=None, n_jobs=None,\n",
       "                                            num_parallel_tree=None,\n",
       "                                            random_state=None, ...))],\n",
       "                 voting=&#x27;soft&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>svc</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(gamma=1.0, kernel=&#x27;sigmoid&#x27;, probability=True)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lr</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>xgb</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "VotingClassifier(estimators=[('svc',\n",
       "                              SVC(gamma=1.0, kernel='sigmoid',\n",
       "                                  probability=True)),\n",
       "                             ('lr', LogisticRegression()),\n",
       "                             ('xgb',\n",
       "                              XGBClassifier(base_score=None, booster=None,\n",
       "                                            callbacks=None,\n",
       "                                            colsample_bylevel=None,\n",
       "                                            colsample_bynode=None,\n",
       "                                            colsample_bytree=None, device=None,\n",
       "                                            early_stopping_rounds=None,\n",
       "                                            enable_categorical=False,\n",
       "                                            eval_metric=None,\n",
       "                                            feature_types=None, gamm...\n",
       "                                            importance_type=None,\n",
       "                                            interaction_constraints=None,\n",
       "                                            learning_rate=None, max_bin=None,\n",
       "                                            max_cat_threshold=None,\n",
       "                                            max_cat_to_onehot=None,\n",
       "                                            max_delta_step=None, max_depth=None,\n",
       "                                            max_leaves=None,\n",
       "                                            min_child_weight=None, missing=nan,\n",
       "                                            monotone_constraints=None,\n",
       "                                            multi_strategy=None,\n",
       "                                            n_estimators=None, n_jobs=None,\n",
       "                                            num_parallel_tree=None,\n",
       "                                            random_state=None, ...))],\n",
       "                 voting='soft')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time \n",
    "from sklearn.svm import SVC\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "svc = SVC(kernel='sigmoid', gamma=1.0, probability=True)\n",
    "LR = LogisticRegression()\n",
    "XGB = XGBClassifier()\n",
    "\n",
    "voting = VotingClassifier(estimators=[('svc', svc), ('lr', LR), ('xgb', XGB)], voting='soft')\n",
    "voting.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d5ad8572",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-16T22:12:02.750363Z",
     "iopub.status.busy": "2024-04-16T22:12:02.749560Z",
     "iopub.status.idle": "2024-04-16T22:14:56.510497Z",
     "shell.execute_reply": "2024-04-16T22:14:56.509791Z"
    },
    "papermill": {
     "duration": 173.819932,
     "end_time": "2024-04-16T22:14:56.538266",
     "exception": false,
     "start_time": "2024-04-16T22:12:02.718334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.8689100954294324\n",
      "Precision 0.882093316519546\n"
     ]
    }
   ],
   "source": [
    "y_pred = voting.predict(X_test)\n",
    "print(\"Accuracy\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision\",precision_score(y_test,y_pred))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 1109107,
     "sourceId": 1863613,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30683,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7072.344843,
   "end_time": "2024-04-16T22:14:57.497790",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-16T20:17:05.152947",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
